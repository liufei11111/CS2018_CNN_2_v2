diff --git a/BatchNormalization.ipynb b/BatchNormalization.ipynb
index bedf3b3..e81ba84 100644
--- a/BatchNormalization.ipynb
+++ b/BatchNormalization.ipynb
@@ -1,27 +1,8 @@
 {
- "nbformat_minor": 2,
- "nbformat": 4,
- "metadata": {
-  "kernelspec": {
-   "name": "python3",
-   "language": "python",
-   "display_name": "Python 3"
-  },
-  "language_info": {
-   "codemirror_mode": {
-    "name": "ipython",
-    "version": 3
-   },
-   "version": "3.5.1",
-   "file_extension": ".py",
-   "nbconvert_exporter": "python",
-   "name": "python",
-   "mimetype": "text/x-python",
-   "pygments_lexer": "ipython3"
-  }
- },
  "cells": [
   {
+   "cell_type": "markdown",
+   "metadata": {},
    "source": [
     "# Batch Normalization\n",
     "One way to make deep networks easier to train is to use more sophisticated optimization procedures such as SGD+momentum, RMSProp, or Adam. Another strategy is to change the architecture of the network to make it easier to train. \n",
@@ -35,11 +16,22 @@
     "\n",
     "[3] [Sergey Ioffe and Christian Szegedy, \"Batch Normalization: Accelerating Deep Network Training by Reducing\n",
     "Internal Covariate Shift\", ICML 2015.](https://arxiv.org/abs/1502.03167)"
-   ],
-   "cell_type": "markdown",
-   "metadata": {}
+   ]
   },
   {
+   "cell_type": "code",
+   "execution_count": 2,
+   "metadata": {},
+   "outputs": [
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "The autoreload extension is already loaded. To reload it, use:\n",
+      "  %reload_ext autoreload\n"
+     ]
+    }
+   ],
    "source": [
     "# As usual, a bit of setup\n",
     "import time\n",
@@ -67,40 +59,68 @@
     "def print_mean_std(x,axis=0):\n",
     "    print('  means: ', x.mean(axis=axis))\n",
     "    print('  stds:  ', x.std(axis=axis))\n",
-    "    print() "
-   ],
-   "cell_type": "code",
-   "outputs": [],
-   "metadata": {
-    "collapsed": true
-   },
-   "execution_count": null
+    "    print()"
+   ]
   },
   {
+   "cell_type": "code",
+   "execution_count": 3,
+   "metadata": {},
+   "outputs": [
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "X_train:  (49000, 3, 32, 32)\n",
+      "y_train:  (49000,)\n",
+      "X_val:  (1000, 3, 32, 32)\n",
+      "y_val:  (1000,)\n",
+      "X_test:  (1000, 3, 32, 32)\n",
+      "y_test:  (1000,)\n"
+     ]
+    }
+   ],
    "source": [
     "# Load the (preprocessed) CIFAR10 data.\n",
     "data = get_CIFAR10_data()\n",
     "for k, v in data.items():\n",
     "  print('%s: ' % k, v.shape)"
-   ],
-   "cell_type": "code",
-   "outputs": [],
-   "metadata": {
-    "collapsed": true
-   },
-   "execution_count": null
+   ]
   },
   {
+   "cell_type": "markdown",
+   "metadata": {},
    "source": [
     "## Batch normalization: forward\n",
     "In the file `cs231n/layers.py`, implement the batch normalization forward pass in the function `batchnorm_forward`. Once you have done so, run the following to test your implementation.\n",
     "\n",
     "Referencing the paper linked to above would be helpful!"
-   ],
-   "cell_type": "markdown",
-   "metadata": {}
+   ]
   },
   {
+   "cell_type": "code",
+   "execution_count": 4,
+   "metadata": {},
+   "outputs": [
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "Before batch normalization:\n",
+      "  means:  [ -2.3814598  -13.18038246   1.91780462]\n",
+      "  stds:   [27.18502186 34.21455511 37.68611762]\n",
+      "\n",
+      "After batch normalization (gamma=1, beta=0)\n",
+      "  means:  [ 4.21884749e-17  5.10702591e-17 -3.51801921e-17]\n",
+      "  stds:   [0.99999999 1.         1.        ]\n",
+      "\n",
+      "After batch normalization (gamma= [1. 2. 3.] , beta= [11. 12. 13.] )\n",
+      "  means:  [11. 12. 13.]\n",
+      "  stds:   [0.99999999 1.99999999 2.99999999]\n",
+      "\n"
+     ]
+    }
+   ],
    "source": [
     "# Check the training-time forward pass by checking means and variances\n",
     "# of features both before and after batch normalization   \n",
@@ -129,15 +149,24 @@
     "print('After batch normalization (gamma=', gamma, ', beta=', beta, ')')\n",
     "a_norm, _ = batchnorm_forward(a, gamma, beta, {'mode': 'train'})\n",
     "print_mean_std(a_norm,axis=0)"
-   ],
-   "cell_type": "code",
-   "outputs": [],
-   "metadata": {
-    "collapsed": true
-   },
-   "execution_count": null
+   ]
   },
   {
+   "cell_type": "code",
+   "execution_count": 5,
+   "metadata": {},
+   "outputs": [
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "After batch normalization (test-time):\n",
+      "  means:  [-0.03927354 -0.04349152 -0.10452688]\n",
+      "  stds:   [1.01531428 1.01238373 0.97819988]\n",
+      "\n"
+     ]
+    }
+   ],
    "source": [
     "# Check the test-time forward pass by running the training-time\n",
     "# forward pass many times to warm up the running averages, and then\n",
@@ -167,15 +196,11 @@
     "# noisier than training-time forward passes.\n",
     "print('After batch normalization (test-time):')\n",
     "print_mean_std(a_norm,axis=0)"
-   ],
-   "cell_type": "code",
-   "outputs": [],
-   "metadata": {
-    "collapsed": true
-   },
-   "execution_count": null
+   ]
   },
   {
+   "cell_type": "markdown",
+   "metadata": {},
    "source": [
     "## Batch normalization: backward\n",
     "Now implement the backward pass for batch normalization in the function `batchnorm_backward`.\n",
@@ -183,11 +208,23 @@
     "To derive the backward pass you should write out the computation graph for batch normalization and backprop through each of the intermediate nodes. Some intermediates may have multiple outgoing branches; make sure to sum gradients across these branches in the backward pass.\n",
     "\n",
     "Once you have finished, run the following to numerically check your backward pass."
-   ],
-   "cell_type": "markdown",
-   "metadata": {}
+   ]
   },
   {
+   "cell_type": "code",
+   "execution_count": 6,
+   "metadata": {},
+   "outputs": [
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "dx error:  1.70292739451216e-09\n",
+      "dgamma error:  7.420414216247087e-13\n",
+      "dbeta error:  2.8795057655839487e-12\n"
+     ]
+    }
+   ],
    "source": [
     "# Gradient check batchnorm backward pass\n",
     "np.random.seed(231)\n",
@@ -212,15 +249,11 @@
     "print('dx error: ', rel_error(dx_num, dx))\n",
     "print('dgamma error: ', rel_error(da_num, dgamma))\n",
     "print('dbeta error: ', rel_error(db_num, dbeta))"
-   ],
-   "cell_type": "code",
-   "outputs": [],
-   "metadata": {
-    "collapsed": true
-   },
-   "execution_count": null
+   ]
   },
   {
+   "cell_type": "markdown",
+   "metadata": {},
    "source": [
     "## Batch normalization: alternative backward\n",
     "In class we talked about two different implementations for the sigmoid backward pass. One strategy is to write out a computation graph composed of simple operations and backprop through all intermediate values. Another strategy is to work out the derivatives on paper. For example, you can derive a very simple formula for the sigmoid function's backward pass by simplifying gradients on paper.\n",
@@ -236,11 +269,15 @@
     "You will need to come up with the derivations for $\\frac{\\partial L}{\\partial x_i}$, by relying on the Chain Rule to first calculate the intermediate $\\frac{\\partial \\mu}{\\partial x_i}, \\frac{\\partial v}{\\partial x_i}, \\frac{\\partial \\sigma}{\\partial x_i},$ then assemble these pieces to calculate $\\frac{\\partial y_i}{\\partial x_i}$. You should make sure each of the intermediary steps are all as simple as possible. \n",
     "\n",
     "After doing so, implement the simplified batch normalization backward pass in the function `batchnorm_backward_alt` and compare the two implementations by running the following. Your two implementations should compute nearly identical results, but the alternative implementation should be a bit faster."
-   ],
-   "cell_type": "markdown",
-   "metadata": {}
+   ]
   },
   {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {
+    "collapsed": true
+   },
+   "outputs": [],
    "source": [
     "np.random.seed(231)\n",
     "N, D = 100, 500\n",
@@ -262,15 +299,11 @@
     "print('dgamma difference: ', rel_error(dgamma1, dgamma2))\n",
     "print('dbeta difference: ', rel_error(dbeta1, dbeta2))\n",
     "print('speedup: %.2fx' % ((t2 - t1) / (t3 - t2)))"
-   ],
-   "cell_type": "code",
-   "outputs": [],
-   "metadata": {
-    "collapsed": true
-   },
-   "execution_count": null
+   ]
   },
   {
+   "cell_type": "markdown",
+   "metadata": {},
    "source": [
     "## Fully Connected Nets with Batch Normalization\n",
     "Now that you have a working implementation for batch normalization, go back to your `FullyConnectedNet` in the file `cs231n/classifiers/fc_net.py`. Modify your implementation to add batch normalization.\n",
@@ -278,11 +311,15 @@
     "Concretely, when the `normalization` flag is set to `\"batchnorm\"` in the constructor, you should insert a batch normalization layer before each ReLU nonlinearity. The outputs from the last layer of the network should not be normalized. Once you are done, run the following to gradient-check your implementation.\n",
     "\n",
     "HINT: You might find it useful to define an additional helper layer similar to those in the file `cs231n/layer_utils.py`. If you decide to do so, do it in the file `cs231n/classifiers/fc_net.py`."
-   ],
-   "cell_type": "markdown",
-   "metadata": {}
+   ]
   },
   {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {
+    "collapsed": true
+   },
+   "outputs": [],
    "source": [
     "np.random.seed(231)\n",
     "N, D, H1, H2, C = 2, 15, 20, 30, 10\n",
@@ -306,23 +343,23 @@
     "    grad_num = eval_numerical_gradient(f, model.params[name], verbose=False, h=1e-5)\n",
     "    print('%s relative error: %.2e' % (name, rel_error(grad_num, grads[name])))\n",
     "  if reg == 0: print()"
-   ],
-   "cell_type": "code",
-   "outputs": [],
-   "metadata": {
-    "collapsed": true
-   },
-   "execution_count": null
+   ]
   },
   {
+   "cell_type": "markdown",
+   "metadata": {},
    "source": [
     "# Batchnorm for deep networks\n",
     "Run the following to train a six-layer network on a subset of 1000 training examples both with and without batch normalization."
-   ],
-   "cell_type": "markdown",
-   "metadata": {}
+   ]
   },
   {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {
+    "collapsed": true
+   },
+   "outputs": [],
    "source": [
     "np.random.seed(231)\n",
     "# Try training a very deep net with batchnorm\n",
@@ -357,22 +394,22 @@
     "                },\n",
     "                verbose=True, print_every=20)\n",
     "solver.train()"
-   ],
-   "cell_type": "code",
-   "outputs": [],
-   "metadata": {
-    "collapsed": true
-   },
-   "execution_count": null
+   ]
   },
   {
+   "cell_type": "markdown",
+   "metadata": {},
    "source": [
     "Run the following to visualize the results from two networks trained above. You should find that using batch normalization helps the network to converge much faster."
-   ],
-   "cell_type": "markdown",
-   "metadata": {}
+   ]
   },
   {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {
+    "collapsed": true
+   },
+   "outputs": [],
    "source": [
     "def plot_training_history(title, label, baseline, bn_solvers, plot_fn, bl_marker='.', bn_marker='.', labels=None):\n",
     "    \"\"\"utility function for plotting training history\"\"\"\n",
@@ -405,25 +442,25 @@
     "\n",
     "plt.gcf().set_size_inches(15, 15)\n",
     "plt.show()"
-   ],
-   "cell_type": "code",
-   "outputs": [],
-   "metadata": {
-    "collapsed": true
-   },
-   "execution_count": null
+   ]
   },
   {
+   "cell_type": "markdown",
+   "metadata": {},
    "source": [
     "# Batch normalization and initialization\n",
     "We will now run a small experiment to study the interaction of batch normalization and weight initialization.\n",
     "\n",
     "The first cell will train 8-layer networks both with and without batch normalization using different scales for weight initialization. The second layer will plot training accuracy, validation set accuracy, and training loss as a function of the weight initialization scale."
-   ],
-   "cell_type": "markdown",
-   "metadata": {}
+   ]
   },
   {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {
+    "collapsed": true
+   },
+   "outputs": [],
    "source": [
     "np.random.seed(231)\n",
     "# Try training a very deep net with batchnorm\n",
@@ -463,15 +500,15 @@
     "                  verbose=False, print_every=200)\n",
     "  solver.train()\n",
     "  solvers_ws[weight_scale] = solver"
-   ],
+   ]
+  },
+  {
    "cell_type": "code",
-   "outputs": [],
+   "execution_count": null,
    "metadata": {
     "collapsed": true
    },
-   "execution_count": null
-  },
-  {
+   "outputs": [],
    "source": [
     "# Plot results of weight scale experiment\n",
     "best_train_accs, bn_best_train_accs = [], []\n",
@@ -515,40 +552,40 @@
     "\n",
     "plt.gcf().set_size_inches(15, 15)\n",
     "plt.show()"
-   ],
-   "cell_type": "code",
-   "outputs": [],
-   "metadata": {
-    "collapsed": true
-   },
-   "execution_count": null
+   ]
   },
   {
+   "cell_type": "markdown",
+   "metadata": {},
    "source": [
     "## Inline Question 1:\n",
     "Describe the results of this experiment. How does the scale of weight initialization affect models with/without batch normalization differently, and why?"
-   ],
-   "cell_type": "markdown",
-   "metadata": {}
+   ]
   },
   {
+   "cell_type": "markdown",
+   "metadata": {},
    "source": [
     "## Answer:\n"
-   ],
-   "cell_type": "markdown",
-   "metadata": {}
+   ]
   },
   {
+   "cell_type": "markdown",
+   "metadata": {},
    "source": [
     "# Batch normalization and batch size\n",
     "We will now run a small experiment to study the interaction of batch normalization and batch size.\n",
     "\n",
     "The first cell will train 6-layer networks both with and without batch normalization using different batch sizes. The second layer will plot training accuracy and validation set accuracy over time."
-   ],
-   "cell_type": "markdown",
-   "metadata": {}
+   ]
   },
   {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {
+    "collapsed": true
+   },
+   "outputs": [],
    "source": [
     "def run_batchsize_experiments(normalization_mode):\n",
     "    np.random.seed(231)\n",
@@ -597,15 +634,15 @@
     "\n",
     "batch_sizes = [5,10,50]\n",
     "bn_solvers_bsize, solver_bsize, batch_sizes = run_batchsize_experiments('batchnorm')"
-   ],
+   ]
+  },
+  {
    "cell_type": "code",
-   "outputs": [],
+   "execution_count": null,
    "metadata": {
     "collapsed": true
    },
-   "execution_count": null
-  },
-  {
+   "outputs": [],
    "source": [
     "plt.subplot(2, 1, 1)\n",
     "plot_training_history('Training accuracy (Batch Normalization)','Epoch', solver_bsize, bn_solvers_bsize, \\\n",
@@ -616,25 +653,21 @@
     "\n",
     "plt.gcf().set_size_inches(15, 10)\n",
     "plt.show()"
-   ],
-   "cell_type": "code",
-   "outputs": [],
-   "metadata": {
-    "collapsed": true
-   },
-   "execution_count": null
+   ]
   },
   {
+   "cell_type": "markdown",
+   "metadata": {},
    "source": [
     "## Inline Question 2:\n",
     "Describe the results of this experiment. What does this imply about the relationship between batch normalization and batch size? Why is this relationship observed?\n",
     "\n",
     "## Answer:\n"
-   ],
-   "cell_type": "markdown",
-   "metadata": {}
+   ]
   },
   {
+   "cell_type": "markdown",
+   "metadata": {},
    "source": [
     "# Layer Normalization\n",
     "Batch normalization has proved to be effective in making networks easier to train, but the dependency on batch size makes it less useful in complex networks which have a cap on the input batch size due to hardware limitations. \n",
@@ -642,11 +675,11 @@
     "Several alternatives to batch normalization have been proposed to mitigate this problem; one such technique is Layer Normalization [4]. Instead of normalizing over the batch, we normalize over the features. In other words, when using Layer Normalization, each feature vector corresponding to a single datapoint is normalized based on the sum of all terms within that feature vector.\n",
     "\n",
     "[4] [Ba, Jimmy Lei, Jamie Ryan Kiros, and Geoffrey E. Hinton. \"Layer Normalization.\" stat 1050 (2016): 21.](https://arxiv.org/pdf/1607.06450.pdf)"
-   ],
-   "cell_type": "markdown",
-   "metadata": {}
+   ]
   },
   {
+   "cell_type": "markdown",
+   "metadata": {},
    "source": [
     "## Inline Question 3:\n",
     "Which of these data preprocessing steps is analogous to batch normalization, and which is analogous to layer normalization?\n",
@@ -657,11 +690,11 @@
     "4. Setting all RGB values to either 0 or 1 depending on a given threshold.\n",
     "\n",
     "## Answer:\n"
-   ],
-   "cell_type": "markdown",
-   "metadata": {}
+   ]
   },
   {
+   "cell_type": "markdown",
+   "metadata": {},
    "source": [
     "# Layer Normalization: Implementation\n",
     "\n",
@@ -678,11 +711,15 @@
     "* Modify `cs231n/classifiers/fc_net.py` to add layer normalization to the `FullyConnectedNet`. When the `normalization` flag is set to `\"layernorm\"` in the constructor, you should insert a layer normalization layer before each ReLU nonlinearity. \n",
     "\n",
     "Run the third cell below to run the batch size experiment on layer normalization."
-   ],
-   "cell_type": "markdown",
-   "metadata": {}
+   ]
   },
   {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {
+    "collapsed": true
+   },
+   "outputs": [],
    "source": [
     "# Check the training-time forward pass by checking means and variances\n",
     "# of features both before and after layer normalization   \n",
@@ -711,15 +748,15 @@
     "print('After layer normalization (gamma=', gamma, ', beta=', beta, ')')\n",
     "a_norm, _ = layernorm_forward(a, gamma, beta, {'mode': 'train'})\n",
     "print_mean_std(a_norm,axis=1)"
-   ],
+   ]
+  },
+  {
    "cell_type": "code",
-   "outputs": [],
+   "execution_count": null,
    "metadata": {
     "collapsed": true
    },
-   "execution_count": null
-  },
-  {
+   "outputs": [],
    "source": [
     "# Gradient check batchnorm backward pass\n",
     "np.random.seed(231)\n",
@@ -745,24 +782,24 @@
     "print('dx error: ', rel_error(dx_num, dx))\n",
     "print('dgamma error: ', rel_error(da_num, dgamma))\n",
     "print('dbeta error: ', rel_error(db_num, dbeta))"
-   ],
-   "cell_type": "code",
-   "outputs": [],
-   "metadata": {
-    "collapsed": true
-   },
-   "execution_count": null
+   ]
   },
   {
+   "cell_type": "markdown",
+   "metadata": {},
    "source": [
     "# Layer Normalization and batch size\n",
     "\n",
     "We will now run the previous batch size experiment with layer normalization instead of batch normalization. Compared to the previous experiment, you should see a markedly smaller influence of batch size on the training history!"
-   ],
-   "cell_type": "markdown",
-   "metadata": {}
+   ]
   },
   {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {
+    "collapsed": true
+   },
+   "outputs": [],
    "source": [
     "ln_solvers_bsize, solver_bsize, batch_sizes = run_batchsize_experiments('layernorm')\n",
     "\n",
@@ -775,15 +812,11 @@
     "\n",
     "plt.gcf().set_size_inches(15, 10)\n",
     "plt.show()"
-   ],
-   "cell_type": "code",
-   "outputs": [],
-   "metadata": {
-    "collapsed": true
-   },
-   "execution_count": null
+   ]
   },
   {
+   "cell_type": "markdown",
+   "metadata": {},
    "source": [
     "## Inline Question 4:\n",
     "When is layer normalization likely to not work well, and why?\n",
@@ -795,9 +828,28 @@
     "\n",
     "## Answer:\n",
     "\n"
-   ],
-   "cell_type": "markdown",
-   "metadata": {}
+   ]
   }
- ]
-}
\ No newline at end of file
+ ],
+ "metadata": {
+  "kernelspec": {
+   "display_name": "Python 3",
+   "language": "python",
+   "name": "python3"
+  },
+  "language_info": {
+   "codemirror_mode": {
+    "name": "ipython",
+    "version": 3
+   },
+   "file_extension": ".py",
+   "mimetype": "text/x-python",
+   "name": "python",
+   "nbconvert_exporter": "python",
+   "pygments_lexer": "ipython3",
+   "version": "3.6.4"
+  }
+ },
+ "nbformat": 4,
+ "nbformat_minor": 1
+}
diff --git a/Dropout.ipynb b/Dropout.ipynb
index 5b4ccdb..b8462e3 100644
--- a/Dropout.ipynb
+++ b/Dropout.ipynb
@@ -1,37 +1,22 @@
 {
- "nbformat_minor": 2,
- "nbformat": 4,
- "metadata": {
-  "kernelspec": {
-   "name": "python3",
-   "language": "python",
-   "display_name": "Python 3"
-  },
-  "language_info": {
-   "codemirror_mode": {
-    "name": "ipython",
-    "version": 3
-   },
-   "version": "3.5.1",
-   "file_extension": ".py",
-   "nbconvert_exporter": "python",
-   "name": "python",
-   "mimetype": "text/x-python",
-   "pygments_lexer": "ipython3"
-  }
- },
  "cells": [
   {
+   "cell_type": "markdown",
+   "metadata": {},
    "source": [
     "# Dropout\n",
     "Dropout [1] is a technique for regularizing neural networks by randomly setting some features to zero during the forward pass. In this exercise you will implement a dropout layer and modify your fully-connected network to optionally use dropout.\n",
     "\n",
     "[1] [Geoffrey E. Hinton et al, \"Improving neural networks by preventing co-adaptation of feature detectors\", arXiv 2012](https://arxiv.org/abs/1207.0580)"
-   ],
-   "cell_type": "markdown",
-   "metadata": {}
+   ]
   },
   {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {
+    "collapsed": true
+   },
+   "outputs": [],
    "source": [
     "# As usual, a bit of setup\n",
     "from __future__ import print_function\n",
@@ -56,40 +41,40 @@
     "def rel_error(x, y):\n",
     "  \"\"\" returns relative error \"\"\"\n",
     "  return np.max(np.abs(x - y) / (np.maximum(1e-8, np.abs(x) + np.abs(y))))"
-   ],
+   ]
+  },
+  {
    "cell_type": "code",
-   "outputs": [],
+   "execution_count": null,
    "metadata": {
     "collapsed": true
    },
-   "execution_count": null
-  },
-  {
+   "outputs": [],
    "source": [
     "# Load the (preprocessed) CIFAR10 data.\n",
     "\n",
     "data = get_CIFAR10_data()\n",
     "for k, v in data.items():\n",
     "  print('%s: ' % k, v.shape)"
-   ],
-   "cell_type": "code",
-   "outputs": [],
-   "metadata": {
-    "collapsed": true
-   },
-   "execution_count": null
+   ]
   },
   {
+   "cell_type": "markdown",
+   "metadata": {},
    "source": [
     "# Dropout forward pass\n",
     "In the file `cs231n/layers.py`, implement the forward pass for dropout. Since dropout behaves differently during training and testing, make sure to implement the operation for both modes.\n",
     "\n",
     "Once you have done so, run the cell below to test your implementation."
-   ],
-   "cell_type": "markdown",
-   "metadata": {}
+   ]
   },
   {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {
+    "collapsed": true
+   },
+   "outputs": [],
    "source": [
     "np.random.seed(231)\n",
     "x = np.random.randn(500, 500) + 10\n",
@@ -105,23 +90,23 @@
     "  print('Fraction of train-time output set to zero: ', (out == 0).mean())\n",
     "  print('Fraction of test-time output set to zero: ', (out_test == 0).mean())\n",
     "  print()"
-   ],
-   "cell_type": "code",
-   "outputs": [],
-   "metadata": {
-    "collapsed": true
-   },
-   "execution_count": null
+   ]
   },
   {
+   "cell_type": "markdown",
+   "metadata": {},
    "source": [
     "# Dropout backward pass\n",
     "In the file `cs231n/layers.py`, implement the backward pass for dropout. After doing so, run the following cell to numerically gradient-check your implementation."
-   ],
-   "cell_type": "markdown",
-   "metadata": {}
+   ]
   },
   {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {
+    "collapsed": true
+   },
+   "outputs": [],
    "source": [
     "np.random.seed(231)\n",
     "x = np.random.randn(10, 10) + 10\n",
@@ -134,38 +119,38 @@
     "\n",
     "# Error should be around e-10 or less\n",
     "print('dx relative error: ', rel_error(dx, dx_num))"
-   ],
-   "cell_type": "code",
-   "outputs": [],
-   "metadata": {
-    "collapsed": true
-   },
-   "execution_count": null
+   ]
   },
   {
+   "cell_type": "markdown",
+   "metadata": {},
    "source": [
     "## Inline Question 1:\n",
     "What happens if we do not divide the values being passed through inverse dropout by `p` in the dropout layer? Why does that happen?"
-   ],
-   "cell_type": "markdown",
-   "metadata": {}
+   ]
   },
   {
+   "cell_type": "markdown",
+   "metadata": {},
    "source": [
     "## Answer:\n"
-   ],
-   "cell_type": "markdown",
-   "metadata": {}
+   ]
   },
   {
+   "cell_type": "markdown",
+   "metadata": {},
    "source": [
     "# Fully-connected nets with Dropout\n",
     "In the file `cs231n/classifiers/fc_net.py`, modify your implementation to use dropout. Specifically, if the constructor of the net receives a value that is not 1 for the `dropout` parameter, then the net should add dropout immediately after every ReLU nonlinearity. After doing so, run the following to numerically gradient-check your implementation."
-   ],
-   "cell_type": "markdown",
-   "metadata": {}
+   ]
   },
   {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {
+    "collapsed": true
+   },
+   "outputs": [],
    "source": [
     "np.random.seed(231)\n",
     "N, D, H1, H2, C = 2, 15, 20, 30, 10\n",
@@ -188,23 +173,24 @@
     "    grad_num = eval_numerical_gradient(f, model.params[name], verbose=False, h=1e-5)\n",
     "    print('%s relative error: %.2e' % (name, rel_error(grad_num, grads[name])))\n",
     "  print()"
-   ],
-   "cell_type": "code",
-   "outputs": [],
-   "metadata": {
-    "collapsed": true
-   },
-   "execution_count": null
+   ]
   },
   {
+   "cell_type": "markdown",
+   "metadata": {},
    "source": [
     "# Regularization experiment\n",
     "As an experiment, we will train a pair of two-layer networks on 500 training examples: one will use no dropout, and one will use a keep probability of 0.25. We will then visualize the training and validation accuracies of the two networks over time."
-   ],
-   "cell_type": "markdown",
-   "metadata": {}
+   ]
   },
   {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {
+    "collapsed": true,
+    "scrolled": false
+   },
+   "outputs": [],
    "source": [
     "# Train two identical nets, one with dropout and one without\n",
     "np.random.seed(231)\n",
@@ -231,16 +217,15 @@
     "                  verbose=True, print_every=100)\n",
     "  solver.train()\n",
     "  solvers[dropout] = solver"
-   ],
+   ]
+  },
+  {
    "cell_type": "code",
-   "outputs": [],
+   "execution_count": null,
    "metadata": {
-    "collapsed": true,
-    "scrolled": false
+    "collapsed": true
    },
-   "execution_count": null
-  },
-  {
+   "outputs": [],
    "source": [
     "# Plot train and validation accuracies of the two models\n",
     "\n",
@@ -269,52 +254,67 @@
     "\n",
     "plt.gcf().set_size_inches(15, 15)\n",
     "plt.show()"
-   ],
-   "cell_type": "code",
-   "outputs": [],
-   "metadata": {
-    "collapsed": true
-   },
-   "execution_count": null
+   ]
   },
   {
+   "cell_type": "markdown",
+   "metadata": {},
    "source": [
     "## Inline Question 2:\n",
     "Compare the validation and training accuracies with and without dropout -- what do your results suggest about dropout as a regularizer?"
-   ],
-   "cell_type": "markdown",
-   "metadata": {}
+   ]
   },
   {
+   "cell_type": "markdown",
+   "metadata": {},
    "source": [
     "## Answer:\n"
-   ],
-   "cell_type": "markdown",
-   "metadata": {}
+   ]
   },
   {
+   "cell_type": "markdown",
+   "metadata": {},
    "source": [
     "## Inline Question 3:\n",
     "Suppose we are training a deep fully-connected network for image classification, with dropout after hidden layers (parameterized by keep probability p). How should we modify p, if at all, if we decide to decrease the size of the hidden layers (that is, the number of nodes in each layer)?"
-   ],
-   "cell_type": "markdown",
-   "metadata": {}
+   ]
   },
   {
+   "cell_type": "markdown",
+   "metadata": {},
    "source": [
     "## Answer:\n"
-   ],
-   "cell_type": "markdown",
-   "metadata": {}
+   ]
   },
   {
-   "source": [],
    "cell_type": "code",
-   "outputs": [],
+   "execution_count": null,
    "metadata": {
     "collapsed": true
    },
-   "execution_count": null
+   "outputs": [],
+   "source": []
+  }
+ ],
+ "metadata": {
+  "kernelspec": {
+   "display_name": "Python 3",
+   "language": "python",
+   "name": "python3"
+  },
+  "language_info": {
+   "codemirror_mode": {
+    "name": "ipython",
+    "version": 3
+   },
+   "file_extension": ".py",
+   "mimetype": "text/x-python",
+   "name": "python",
+   "nbconvert_exporter": "python",
+   "pygments_lexer": "ipython3",
+   "version": "3.6.4"
   }
- ]
-}
\ No newline at end of file
+ },
+ "nbformat": 4,
+ "nbformat_minor": 2
+}
diff --git a/FullyConnectedNets.ipynb b/FullyConnectedNets.ipynb
index dd75722..b838cc2 100644
--- a/FullyConnectedNets.ipynb
+++ b/FullyConnectedNets.ipynb
@@ -1,27 +1,8 @@
 {
- "nbformat_minor": 2,
- "nbformat": 4,
- "metadata": {
-  "kernelspec": {
-   "name": "python3",
-   "language": "python",
-   "display_name": "Python 3"
-  },
-  "language_info": {
-   "codemirror_mode": {
-    "name": "ipython",
-    "version": 3
-   },
-   "version": "3.5.1",
-   "file_extension": ".py",
-   "nbconvert_exporter": "python",
-   "name": "python",
-   "mimetype": "text/x-python",
-   "pygments_lexer": "ipython3"
-  }
- },
  "cells": [
   {
+   "cell_type": "markdown",
+   "metadata": {},
    "source": [
     "# Fully-Connected Neural Nets\n",
     "In the previous homework you implemented a fully-connected two-layer neural network on CIFAR-10. The implementation was simple but not very modular since the loss and gradient were computed in a single monolithic function. This is manageable for a simple two-layer network, but would become impractical as we move to bigger models. Ideally we want to build networks using a more modular design so that we can implement different layer types in isolation and then snap them together into models with different architectures.\n",
@@ -63,11 +44,22 @@
     "\n",
     "In addition to implementing fully-connected networks of arbitrary depth, we will also explore different update rules for optimization, and introduce Dropout as a regularizer and Batch/Layer Normalization as a tool to more efficiently optimize deep networks.\n",
     "  "
-   ],
-   "cell_type": "markdown",
-   "metadata": {}
+   ]
   },
   {
+   "cell_type": "code",
+   "execution_count": 1,
+   "metadata": {},
+   "outputs": [
+    {
+     "name": "stderr",
+     "output_type": "stream",
+     "text": [
+      "/Users/feiliu/miniconda3/envs/cs231n/lib/python3.6/site-packages/matplotlib/__init__.py:899: UserWarning: could not find rc file; returning defaults\n",
+      "  warnings.warn(message)\n"
+     ]
+    }
+   ],
    "source": [
     "# As usual, a bit of setup\n",
     "from __future__ import print_function\n",
@@ -92,40 +84,58 @@
     "def rel_error(x, y):\n",
     "  \"\"\" returns relative error \"\"\"\n",
     "  return np.max(np.abs(x - y) / (np.maximum(1e-8, np.abs(x) + np.abs(y))))"
-   ],
-   "cell_type": "code",
-   "outputs": [],
-   "metadata": {
-    "collapsed": true
-   },
-   "execution_count": null
+   ]
   },
   {
+   "cell_type": "code",
+   "execution_count": 2,
+   "metadata": {},
+   "outputs": [
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "('X_train: ', (49000, 3, 32, 32))\n",
+      "('y_train: ', (49000,))\n",
+      "('X_val: ', (1000, 3, 32, 32))\n",
+      "('y_val: ', (1000,))\n",
+      "('X_test: ', (1000, 3, 32, 32))\n",
+      "('y_test: ', (1000,))\n"
+     ]
+    }
+   ],
    "source": [
     "# Load the (preprocessed) CIFAR10 data.\n",
     "\n",
     "data = get_CIFAR10_data()\n",
     "for k, v in list(data.items()):\n",
     "  print(('%s: ' % k, v.shape))"
-   ],
-   "cell_type": "code",
-   "outputs": [],
-   "metadata": {
-    "collapsed": true
-   },
-   "execution_count": null
+   ]
   },
   {
+   "cell_type": "markdown",
+   "metadata": {},
    "source": [
     "# Affine layer: foward\n",
     "Open the file `cs231n/layers.py` and implement the `affine_forward` function.\n",
     "\n",
     "Once you are done you can test your implementaion by running the following:"
-   ],
-   "cell_type": "markdown",
-   "metadata": {}
+   ]
   },
   {
+   "cell_type": "code",
+   "execution_count": 3,
+   "metadata": {},
+   "outputs": [
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "Testing affine_forward function:\n",
+      "difference:  9.7698500479884e-10\n"
+     ]
+    }
+   ],
    "source": [
     "# Test the affine_forward function\n",
     "\n",
@@ -147,23 +157,32 @@
     "# Compare your output with ours. The error should be around e-9 or less.\n",
     "print('Testing affine_forward function:')\n",
     "print('difference: ', rel_error(out, correct_out))"
-   ],
-   "cell_type": "code",
-   "outputs": [],
-   "metadata": {
-    "collapsed": true
-   },
-   "execution_count": null
+   ]
   },
   {
+   "cell_type": "markdown",
+   "metadata": {},
    "source": [
     "# Affine layer: backward\n",
     "Now implement the `affine_backward` function and test your implementation using numeric gradient checking."
-   ],
-   "cell_type": "markdown",
-   "metadata": {}
+   ]
   },
   {
+   "cell_type": "code",
+   "execution_count": 4,
+   "metadata": {},
+   "outputs": [
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "Testing affine_backward function:\n",
+      "dx error:  6.986348504372948e-11\n",
+      "dw error:  9.904023583987626e-11\n",
+      "db error:  7.736978834487815e-12\n"
+     ]
+    }
+   ],
    "source": [
     "# Test the affine_backward function\n",
     "np.random.seed(231)\n",
@@ -184,23 +203,30 @@
     "print('dx error: ', rel_error(dx_num, dx))\n",
     "print('dw error: ', rel_error(dw_num, dw))\n",
     "print('db error: ', rel_error(db_num, db))"
-   ],
-   "cell_type": "code",
-   "outputs": [],
-   "metadata": {
-    "collapsed": true
-   },
-   "execution_count": null
+   ]
   },
   {
+   "cell_type": "markdown",
+   "metadata": {},
    "source": [
     "# ReLU activation: forward\n",
     "Implement the forward pass for the ReLU activation function in the `relu_forward` function and test your implementation using the following:"
-   ],
-   "cell_type": "markdown",
-   "metadata": {}
+   ]
   },
   {
+   "cell_type": "code",
+   "execution_count": 5,
+   "metadata": {},
+   "outputs": [
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "Testing relu_forward function:\n",
+      "difference:  4.999999798022158e-08\n"
+     ]
+    }
+   ],
    "source": [
     "# Test the relu_forward function\n",
     "\n",
@@ -214,23 +240,30 @@
     "# Compare your output with ours. The error should be on the order of e-8\n",
     "print('Testing relu_forward function:')\n",
     "print('difference: ', rel_error(out, correct_out))"
-   ],
-   "cell_type": "code",
-   "outputs": [],
-   "metadata": {
-    "collapsed": true
-   },
-   "execution_count": null
+   ]
   },
   {
+   "cell_type": "markdown",
+   "metadata": {},
    "source": [
     "# ReLU activation: backward\n",
     "Now implement the backward pass for the ReLU activation function in the `relu_backward` function and test your implementation using numeric gradient checking:"
-   ],
-   "cell_type": "markdown",
-   "metadata": {}
+   ]
   },
   {
+   "cell_type": "code",
+   "execution_count": 6,
+   "metadata": {},
+   "outputs": [
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "Testing relu_backward function:\n",
+      "dx error:  3.2756349136310288e-12\n"
+     ]
+    }
+   ],
    "source": [
     "np.random.seed(231)\n",
     "x = np.random.randn(10, 10)\n",
@@ -244,15 +277,11 @@
     "# The error should be on the order of e-12\n",
     "print('Testing relu_backward function:')\n",
     "print('dx error: ', rel_error(dx_num, dx))"
-   ],
-   "cell_type": "code",
-   "outputs": [],
-   "metadata": {
-    "collapsed": true
-   },
-   "execution_count": null
+   ]
   },
   {
+   "cell_type": "markdown",
+   "metadata": {},
    "source": [
     "## Inline Question 1: \n",
     "\n",
@@ -260,29 +289,43 @@
     "1. Sigmoid\n",
     "2. ReLU\n",
     "3. Leaky ReLU"
-   ],
-   "cell_type": "markdown",
-   "metadata": {}
+   ]
   },
   {
+   "cell_type": "markdown",
+   "metadata": {},
    "source": [
     "## Answer:\n",
-    "[FILL THIS IN]\n"
-   ],
-   "cell_type": "markdown",
-   "metadata": {}
+    "[1]\n",
+    "The sigmoud function will saturate at the 0 and 1 and have a derivative of almost 0. For example, we have layer Sigmoid(w*x+b) is the model and x is one dimentional. Say, at the moment x is 10 and w is 1. Now, the derivative of sigmoid is almost zero and the update to w is 10 times a small number and it is close to zero. If w*x+b is large positive or negative values, the signoid derivative is amost zero. Then we got a product of signoid derivative and x as update to w. The first term is so small that we get almost no update after the product."
+   ]
   },
   {
+   "cell_type": "markdown",
+   "metadata": {},
    "source": [
     "# \"Sandwich\" layers\n",
     "There are some common patterns of layers that are frequently used in neural nets. For example, affine layers are frequently followed by a ReLU nonlinearity. To make these common patterns easy, we define several convenience layers in the file `cs231n/layer_utils.py`.\n",
     "\n",
     "For now take a look at the `affine_relu_forward` and `affine_relu_backward` functions, and run the following to numerically gradient check the backward pass:"
-   ],
-   "cell_type": "markdown",
-   "metadata": {}
+   ]
   },
   {
+   "cell_type": "code",
+   "execution_count": 7,
+   "metadata": {},
+   "outputs": [
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "Testing affine_relu_forward and affine_relu_backward:\n",
+      "dx error:  3.143474713685874e-11\n",
+      "dw error:  1.486123845798551e-10\n",
+      "db error:  7.826724021458994e-12\n"
+     ]
+    }
+   ],
    "source": [
     "from cs231n.layer_utils import affine_relu_forward, affine_relu_backward\n",
     "np.random.seed(231)\n",
@@ -303,25 +346,37 @@
     "print('dx error: ', rel_error(dx_num, dx))\n",
     "print('dw error: ', rel_error(dw_num, dw))\n",
     "print('db error: ', rel_error(db_num, db))"
-   ],
-   "cell_type": "code",
-   "outputs": [],
-   "metadata": {
-    "collapsed": true
-   },
-   "execution_count": null
+   ]
   },
   {
+   "cell_type": "markdown",
+   "metadata": {},
    "source": [
     "# Loss layers: Softmax and SVM\n",
     "You implemented these loss functions in the last assignment, so we'll give them to you for free here. You should still make sure you understand how they work by looking at the implementations in `cs231n/layers.py`.\n",
     "\n",
     "You can make sure that the implementations are correct by running the following:"
-   ],
-   "cell_type": "markdown",
-   "metadata": {}
+   ]
   },
   {
+   "cell_type": "code",
+   "execution_count": 8,
+   "metadata": {},
+   "outputs": [
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "Testing svm_loss:\n",
+      "loss:  8.999602749096233\n",
+      "dx error:  1.4021566006651672e-09\n",
+      "\n",
+      "Testing softmax_loss:\n",
+      "loss:  2.302545844500738\n",
+      "dx error:  9.384673161989355e-09\n"
+     ]
+    }
+   ],
    "source": [
     "np.random.seed(231)\n",
     "num_classes, num_inputs = 10, 50\n",
@@ -343,25 +398,43 @@
     "print('\\nTesting softmax_loss:')\n",
     "print('loss: ', loss)\n",
     "print('dx error: ', rel_error(dx_num, dx))"
-   ],
-   "cell_type": "code",
-   "outputs": [],
-   "metadata": {
-    "collapsed": true
-   },
-   "execution_count": null
+   ]
   },
   {
+   "cell_type": "markdown",
+   "metadata": {},
    "source": [
     "# Two-layer network\n",
     "In the previous assignment you implemented a two-layer neural network in a single monolithic class. Now that you have implemented modular versions of the necessary layers, you will reimplement the two layer network using these modular implementations.\n",
     "\n",
     "Open the file `cs231n/classifiers/fc_net.py` and complete the implementation of the `TwoLayerNet` class. This class will serve as a model for the other networks you will implement in this assignment, so read through it to make sure you understand the API. You can run the cell below to test your implementation."
-   ],
-   "cell_type": "markdown",
-   "metadata": {}
+   ]
   },
   {
+   "cell_type": "code",
+   "execution_count": 9,
+   "metadata": {},
+   "outputs": [
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "Testing initialization ... \n",
+      "Testing test-time forward pass ... \n",
+      "Testing training loss (no regularization)\n",
+      "Running numeric gradient check with reg =  0.0\n",
+      "W1 relative error: 2.13e-08\n",
+      "W2 relative error: 3.31e-10\n",
+      "b1 relative error: 8.37e-09\n",
+      "b2 relative error: 2.53e-10\n",
+      "Running numeric gradient check with reg =  0.7\n",
+      "W1 relative error: 2.53e-07\n",
+      "W2 relative error: 1.37e-07\n",
+      "b1 relative error: 1.56e-08\n",
+      "b2 relative error: 9.09e-10\n"
+     ]
+    }
+   ],
    "source": [
     "np.random.seed(231)\n",
     "N, D, H, C = 3, 5, 50, 7\n",
@@ -416,25 +489,90 @@
     "    f = lambda _: model.loss(X, y)[0]\n",
     "    grad_num = eval_numerical_gradient(f, model.params[name], verbose=False)\n",
     "    print('%s relative error: %.2e' % (name, rel_error(grad_num, grads[name])))"
-   ],
-   "cell_type": "code",
-   "outputs": [],
-   "metadata": {
-    "collapsed": true
-   },
-   "execution_count": null
+   ]
   },
   {
+   "cell_type": "markdown",
+   "metadata": {},
    "source": [
     "# Solver\n",
     "In the previous assignment, the logic for training models was coupled to the models themselves. Following a more modular design, for this assignment we have split the logic for training models into a separate class.\n",
     "\n",
     "Open the file `cs231n/solver.py` and read through it to familiarize yourself with the API. After doing so, use a `Solver` instance to train a `TwoLayerNet` that achieves at least `50%` accuracy on the validation set."
-   ],
-   "cell_type": "markdown",
-   "metadata": {}
+   ]
   },
   {
+   "cell_type": "code",
+   "execution_count": 14,
+   "metadata": {},
+   "outputs": [
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "(Iteration 1 / 4900) loss: 2.304414\n",
+      "(Epoch 0 / 10) train acc: 0.139000; val_acc: 0.155000\n",
+      "(Iteration 101 / 4900) loss: 1.865593\n",
+      "(Iteration 201 / 4900) loss: 1.658354\n",
+      "(Iteration 301 / 4900) loss: 1.735908\n",
+      "(Iteration 401 / 4900) loss: 1.600192\n",
+      "(Epoch 1 / 10) train acc: 0.429000; val_acc: 0.450000\n",
+      "(Iteration 501 / 4900) loss: 1.545164\n",
+      "(Iteration 601 / 4900) loss: 1.787054\n",
+      "(Iteration 701 / 4900) loss: 1.558230\n",
+      "(Iteration 801 / 4900) loss: 1.448395\n",
+      "(Iteration 901 / 4900) loss: 1.294256\n",
+      "(Epoch 2 / 10) train acc: 0.503000; val_acc: 0.477000\n",
+      "(Iteration 1001 / 4900) loss: 1.331677\n",
+      "(Iteration 1101 / 4900) loss: 1.403518\n",
+      "(Iteration 1201 / 4900) loss: 1.367544\n",
+      "(Iteration 1301 / 4900) loss: 1.396133\n",
+      "(Iteration 1401 / 4900) loss: 1.454344\n",
+      "(Epoch 3 / 10) train acc: 0.488000; val_acc: 0.495000\n",
+      "(Iteration 1501 / 4900) loss: 1.177587\n",
+      "(Iteration 1601 / 4900) loss: 1.256386\n",
+      "(Iteration 1701 / 4900) loss: 1.565185\n",
+      "(Iteration 1801 / 4900) loss: 1.711917\n",
+      "(Iteration 1901 / 4900) loss: 1.328598\n",
+      "(Epoch 4 / 10) train acc: 0.506000; val_acc: 0.490000\n",
+      "(Iteration 2001 / 4900) loss: 1.312037\n",
+      "(Iteration 2101 / 4900) loss: 1.351049\n",
+      "(Iteration 2201 / 4900) loss: 1.289415\n",
+      "(Iteration 2301 / 4900) loss: 1.449655\n",
+      "(Iteration 2401 / 4900) loss: 1.170454\n",
+      "(Epoch 5 / 10) train acc: 0.571000; val_acc: 0.485000\n",
+      "(Iteration 2501 / 4900) loss: 1.260335\n",
+      "(Iteration 2601 / 4900) loss: 1.329658\n",
+      "(Iteration 2701 / 4900) loss: 1.382822\n",
+      "(Iteration 2801 / 4900) loss: 1.363248\n",
+      "(Iteration 2901 / 4900) loss: 1.200102\n",
+      "(Epoch 6 / 10) train acc: 0.580000; val_acc: 0.490000\n",
+      "(Iteration 3001 / 4900) loss: 1.203365\n",
+      "(Iteration 3101 / 4900) loss: 1.275299\n",
+      "(Iteration 3201 / 4900) loss: 1.314288\n",
+      "(Iteration 3301 / 4900) loss: 1.229945\n",
+      "(Iteration 3401 / 4900) loss: 1.255648\n",
+      "(Epoch 7 / 10) train acc: 0.568000; val_acc: 0.489000\n",
+      "(Iteration 3501 / 4900) loss: 1.154298\n",
+      "(Iteration 3601 / 4900) loss: 1.122243\n",
+      "(Iteration 3701 / 4900) loss: 1.336176\n",
+      "(Iteration 3801 / 4900) loss: 1.338969\n",
+      "(Iteration 3901 / 4900) loss: 1.382154\n",
+      "(Epoch 8 / 10) train acc: 0.604000; val_acc: 0.501000\n",
+      "(Iteration 4001 / 4900) loss: 1.166675\n",
+      "(Iteration 4101 / 4900) loss: 1.102815\n",
+      "(Iteration 4201 / 4900) loss: 1.047826\n",
+      "(Iteration 4301 / 4900) loss: 1.204683\n",
+      "(Iteration 4401 / 4900) loss: 1.263360\n",
+      "(Epoch 9 / 10) train acc: 0.607000; val_acc: 0.502000\n",
+      "(Iteration 4501 / 4900) loss: 1.236084\n",
+      "(Iteration 4601 / 4900) loss: 1.103570\n",
+      "(Iteration 4701 / 4900) loss: 1.434724\n",
+      "(Iteration 4801 / 4900) loss: 1.307403\n",
+      "(Epoch 10 / 10) train acc: 0.641000; val_acc: 0.513000\n"
+     ]
+    }
+   ],
    "source": [
     "model = TwoLayerNet()\n",
     "solver = None\n",
@@ -443,19 +581,38 @@
     "# TODO: Use a Solver instance to train a TwoLayerNet that achieves at least  #\n",
     "# 50% accuracy on the validation set.                                        #\n",
     "##############################################################################\n",
-    "pass\n",
+    "\n",
+    "solver = Solver(model, data,\n",
+    "                update_rule='sgd',\n",
+    "                optim_config={\n",
+    "                  'learning_rate': 1e-3,\n",
+    "                },\n",
+    "                lr_decay=0.95,\n",
+    "                num_epochs=10, batch_size=100,\n",
+    "                print_every=100)\n",
+    "solver.train()\n",
+    "\n",
     "##############################################################################\n",
     "#                             END OF YOUR CODE                               #\n",
     "##############################################################################"
-   ],
-   "cell_type": "code",
-   "outputs": [],
-   "metadata": {
-    "collapsed": true
-   },
-   "execution_count": null
+   ]
   },
   {
+   "cell_type": "code",
+   "execution_count": 15,
+   "metadata": {},
+   "outputs": [
+    {
+     "data": {
+      "image/png": "\n",
+      "text/plain": [
+       "<matplotlib.figure.Figure at 0x112a48a20>"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    }
+   ],
    "source": [
     "# Run this cell to visualize training loss and train / val accuracy\n",
     "\n",
@@ -473,15 +630,11 @@
     "plt.legend(loc='lower right')\n",
     "plt.gcf().set_size_inches(15, 12)\n",
     "plt.show()"
-   ],
-   "cell_type": "code",
-   "outputs": [],
-   "metadata": {
-    "collapsed": true
-   },
-   "execution_count": null
+   ]
   },
   {
+   "cell_type": "markdown",
+   "metadata": {},
    "source": [
     "# Multilayer network\n",
     "Next you will implement a fully-connected network with an arbitrary number of hidden layers.\n",
@@ -489,27 +642,52 @@
     "Read through the `FullyConnectedNet` class in the file `cs231n/classifiers/fc_net.py`.\n",
     "\n",
     "Implement the initialization, the forward pass, and the backward pass. For the moment don't worry about implementing dropout or batch/layer normalization; we will add those features soon."
-   ],
-   "cell_type": "markdown",
-   "metadata": {}
+   ]
   },
   {
+   "cell_type": "markdown",
+   "metadata": {},
    "source": [
     "## Initial loss and gradient check"
-   ],
-   "cell_type": "markdown",
-   "metadata": {}
+   ]
   },
   {
+   "cell_type": "markdown",
+   "metadata": {},
    "source": [
     "As a sanity check, run the following to check the initial loss and to gradient check the network both with and without regularization. Do the initial losses seem reasonable?\n",
     "\n",
     "For gradient checking, you should expect to see errors around 1e-7 or less."
-   ],
-   "cell_type": "markdown",
-   "metadata": {}
+   ]
   },
   {
+   "cell_type": "code",
+   "execution_count": 16,
+   "metadata": {},
+   "outputs": [
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "Running check with reg =  0\n",
+      "Initial loss:  2.3004790897684924\n",
+      "W1 relative error: 1.48e-07\n",
+      "W2 relative error: 2.21e-05\n",
+      "W3 relative error: 3.53e-07\n",
+      "b1 relative error: 5.38e-09\n",
+      "b2 relative error: 2.09e-09\n",
+      "b3 relative error: 5.80e-11\n",
+      "Running check with reg =  3.14\n",
+      "Initial loss:  7.052114776533016\n",
+      "W1 relative error: 6.86e-09\n",
+      "W2 relative error: 3.52e-08\n",
+      "W3 relative error: 1.32e-08\n",
+      "b1 relative error: 1.48e-08\n",
+      "b2 relative error: 1.72e-09\n",
+      "b3 relative error: 1.80e-10\n"
+     ]
+    }
+   ],
    "source": [
     "np.random.seed(231)\n",
     "N, D, H1, H2, C = 2, 15, 20, 30, 10\n",
@@ -531,22 +709,64 @@
     "    f = lambda _: model.loss(X, y)[0]\n",
     "    grad_num = eval_numerical_gradient(f, model.params[name], verbose=False, h=1e-5)\n",
     "    print('%s relative error: %.2e' % (name, rel_error(grad_num, grads[name])))"
-   ],
-   "cell_type": "code",
-   "outputs": [],
-   "metadata": {
-    "collapsed": true
-   },
-   "execution_count": null
+   ]
   },
   {
+   "cell_type": "markdown",
+   "metadata": {},
    "source": [
     "As another sanity check, make sure you can overfit a small dataset of 50 images. First we will try a three-layer network with 100 units in each hidden layer. In the following cell, tweak the learning rate and initialization scale to overfit and achieve 100% training accuracy within 20 epochs."
-   ],
-   "cell_type": "markdown",
-   "metadata": {}
+   ]
   },
   {
+   "cell_type": "code",
+   "execution_count": 22,
+   "metadata": {
+    "scrolled": false
+   },
+   "outputs": [
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "(Iteration 1 / 40) loss: 762.049354\n",
+      "(Epoch 0 / 20) train acc: 0.220000; val_acc: 0.137000\n",
+      "(Epoch 1 / 20) train acc: 0.260000; val_acc: 0.152000\n",
+      "(Epoch 2 / 20) train acc: 0.360000; val_acc: 0.144000\n",
+      "(Epoch 3 / 20) train acc: 0.460000; val_acc: 0.142000\n",
+      "(Epoch 4 / 20) train acc: 0.580000; val_acc: 0.156000\n",
+      "(Epoch 5 / 20) train acc: 0.600000; val_acc: 0.164000\n",
+      "(Iteration 11 / 40) loss: 90.051237\n",
+      "(Epoch 6 / 20) train acc: 0.780000; val_acc: 0.164000\n",
+      "(Epoch 7 / 20) train acc: 0.820000; val_acc: 0.169000\n",
+      "(Epoch 8 / 20) train acc: 0.860000; val_acc: 0.163000\n",
+      "(Epoch 9 / 20) train acc: 0.860000; val_acc: 0.156000\n",
+      "(Epoch 10 / 20) train acc: 0.880000; val_acc: 0.157000\n",
+      "(Iteration 21 / 40) loss: 20.191204\n",
+      "(Epoch 11 / 20) train acc: 0.820000; val_acc: 0.174000\n",
+      "(Epoch 12 / 20) train acc: 0.880000; val_acc: 0.167000\n",
+      "(Epoch 13 / 20) train acc: 0.960000; val_acc: 0.168000\n",
+      "(Epoch 14 / 20) train acc: 0.980000; val_acc: 0.164000\n",
+      "(Epoch 15 / 20) train acc: 0.980000; val_acc: 0.163000\n",
+      "(Iteration 31 / 40) loss: 0.000000\n",
+      "(Epoch 16 / 20) train acc: 0.980000; val_acc: 0.163000\n",
+      "(Epoch 17 / 20) train acc: 0.980000; val_acc: 0.163000\n",
+      "(Epoch 18 / 20) train acc: 1.000000; val_acc: 0.163000\n",
+      "(Epoch 19 / 20) train acc: 1.000000; val_acc: 0.163000\n",
+      "(Epoch 20 / 20) train acc: 1.000000; val_acc: 0.163000\n"
+     ]
+    },
+    {
+     "data": {
+      "image/png": "\n",
+      "text/plain": [
+       "<matplotlib.figure.Figure at 0x10f356978>"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    }
+   ],
    "source": [
     "# TODO: Use a three-layer Net to overfit 50 training examples by \n",
     "# tweaking just the learning rate and initialization scale.\n",
@@ -559,7 +779,7 @@
     "  'y_val': data['y_val'],\n",
     "}\n",
     "\n",
-    "weight_scale = 1e-2\n",
+    "weight_scale = 1/np.sqrt(50)\n",
     "learning_rate = 1e-4\n",
     "model = FullyConnectedNet([100, 100],\n",
     "              weight_scale=weight_scale, dtype=np.float64)\n",
@@ -577,23 +797,62 @@
     "plt.xlabel('Iteration')\n",
     "plt.ylabel('Training loss')\n",
     "plt.show()"
-   ],
-   "cell_type": "code",
-   "outputs": [],
-   "metadata": {
-    "collapsed": true,
-    "scrolled": false
-   },
-   "execution_count": null
+   ]
   },
   {
+   "cell_type": "markdown",
+   "metadata": {},
    "source": [
     "Now try to use a five-layer network with 100 units on each layer to overfit 50 training examples. Again you will have to adjust the learning rate and weight initialization, but you should be able to achieve 100% training accuracy within 20 epochs."
-   ],
-   "cell_type": "markdown",
-   "metadata": {}
+   ]
   },
   {
+   "cell_type": "code",
+   "execution_count": 23,
+   "metadata": {},
+   "outputs": [
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "(Iteration 1 / 40) loss: 147.032739\n",
+      "(Epoch 0 / 20) train acc: 0.160000; val_acc: 0.112000\n",
+      "(Epoch 1 / 20) train acc: 0.080000; val_acc: 0.066000\n",
+      "(Epoch 2 / 20) train acc: 0.200000; val_acc: 0.098000\n",
+      "(Epoch 3 / 20) train acc: 0.400000; val_acc: 0.125000\n",
+      "(Epoch 4 / 20) train acc: 0.500000; val_acc: 0.118000\n",
+      "(Epoch 5 / 20) train acc: 0.820000; val_acc: 0.135000\n",
+      "(Iteration 11 / 40) loss: 0.706017\n",
+      "(Epoch 6 / 20) train acc: 0.880000; val_acc: 0.130000\n",
+      "(Epoch 7 / 20) train acc: 0.980000; val_acc: 0.139000\n",
+      "(Epoch 8 / 20) train acc: 1.000000; val_acc: 0.138000\n",
+      "(Epoch 9 / 20) train acc: 1.000000; val_acc: 0.138000\n",
+      "(Epoch 10 / 20) train acc: 1.000000; val_acc: 0.137000\n",
+      "(Iteration 21 / 40) loss: 0.004392\n",
+      "(Epoch 11 / 20) train acc: 1.000000; val_acc: 0.137000\n",
+      "(Epoch 12 / 20) train acc: 1.000000; val_acc: 0.137000\n",
+      "(Epoch 13 / 20) train acc: 1.000000; val_acc: 0.138000\n",
+      "(Epoch 14 / 20) train acc: 1.000000; val_acc: 0.138000\n",
+      "(Epoch 15 / 20) train acc: 1.000000; val_acc: 0.138000\n",
+      "(Iteration 31 / 40) loss: 0.000872\n",
+      "(Epoch 16 / 20) train acc: 1.000000; val_acc: 0.138000\n",
+      "(Epoch 17 / 20) train acc: 1.000000; val_acc: 0.138000\n",
+      "(Epoch 18 / 20) train acc: 1.000000; val_acc: 0.139000\n",
+      "(Epoch 19 / 20) train acc: 1.000000; val_acc: 0.139000\n",
+      "(Epoch 20 / 20) train acc: 1.000000; val_acc: 0.139000\n"
+     ]
+    },
+    {
+     "data": {
+      "image/png": "\n",
+      "text/plain": [
+       "<matplotlib.figure.Figure at 0x112a48198>"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    }
+   ],
    "source": [
     "# TODO: Use a five-layer Net to overfit 50 training examples by \n",
     "# tweaking just the learning rate and initialization scale.\n",
@@ -607,7 +866,7 @@
     "}\n",
     "\n",
     "learning_rate = 2e-3\n",
-    "weight_scale = 1e-5\n",
+    "weight_scale = 1/np.sqrt(100)\n",
     "model = FullyConnectedNet([100, 100, 100, 100],\n",
     "                weight_scale=weight_scale, dtype=np.float64)\n",
     "solver = Solver(model, small_data,\n",
@@ -624,49 +883,58 @@
     "plt.xlabel('Iteration')\n",
     "plt.ylabel('Training loss')\n",
     "plt.show()"
-   ],
-   "cell_type": "code",
-   "outputs": [],
-   "metadata": {
-    "collapsed": true
-   },
-   "execution_count": null
+   ]
   },
   {
+   "cell_type": "markdown",
+   "metadata": {},
    "source": [
     "## Inline Question 2: \n",
     "Did you notice anything about the comparative difficulty of training the three-layer net vs training the five layer net? In particular, based on your experience, which network seemed more sensitive to the initialization scale? Why do you think that is the case?"
-   ],
-   "cell_type": "markdown",
-   "metadata": {}
+   ]
   },
   {
+   "cell_type": "markdown",
+   "metadata": {},
    "source": [
     "## Answer:\n",
-    "[FILL THIS IN]\n"
-   ],
-   "cell_type": "markdown",
-   "metadata": {}
+    "[FILL THIS IN]\n",
+    "\n",
+    "5 layers are harder because when I set the weight scale to be 1/sqrt(50), 3 layers will work and 5 layers will not and only when I set 1/sqrt(100) would 5 layers work. 5 layers is more sensitive and require the initial value to be close to zero. Otherwise, the cumulative effect for affin network will likely to explode on its way propagating through the network before it knows the right direction to go and update the parameters the right way. This is also partially caused by SGD where we might be lead into a wrong direction given the batch and not be able to come back if we fail on the way due to numerical issues. "
+   ]
   },
   {
+   "cell_type": "markdown",
+   "metadata": {},
    "source": [
     "# Update rules\n",
     "So far we have used vanilla stochastic gradient descent (SGD) as our update rule. More sophisticated update rules can make it easier to train deep networks. We will implement a few of the most commonly used update rules and compare them to vanilla SGD."
-   ],
-   "cell_type": "markdown",
-   "metadata": {}
+   ]
   },
   {
+   "cell_type": "markdown",
+   "metadata": {},
    "source": [
     "# SGD+Momentum\n",
     "Stochastic gradient descent with momentum is a widely used update rule that tends to make deep networks converge faster than vanilla stochastic gradient descent. See the Momentum Update section at http://cs231n.github.io/neural-networks-3/#sgd for more information.\n",
     "\n",
     "Open the file `cs231n/optim.py` and read the documentation at the top of the file to make sure you understand the API. Implement the SGD+momentum update rule in the function `sgd_momentum` and run the following to check your implementation. You should see errors less than e-8."
-   ],
-   "cell_type": "markdown",
-   "metadata": {}
+   ]
   },
   {
+   "cell_type": "code",
+   "execution_count": 26,
+   "metadata": {},
+   "outputs": [
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "next_w error:  8.882347033505819e-09\n",
+      "velocity error:  4.269287743278663e-09\n"
+     ]
+    }
+   ],
    "source": [
     "from cs231n.optim import sgd_momentum\n",
     "\n",
@@ -692,22 +960,103 @@
     "# Should see relative errors around e-8 or less\n",
     "print('next_w error: ', rel_error(next_w, expected_next_w))\n",
     "print('velocity error: ', rel_error(expected_velocity, config['velocity']))"
-   ],
-   "cell_type": "code",
-   "outputs": [],
-   "metadata": {
-    "collapsed": true
-   },
-   "execution_count": null
+   ]
   },
   {
+   "cell_type": "markdown",
+   "metadata": {},
    "source": [
     "Once you have done so, run the following to train a six-layer network with both SGD and SGD+momentum. You should see the SGD+momentum update rule converge faster."
-   ],
-   "cell_type": "markdown",
-   "metadata": {}
+   ]
   },
   {
+   "cell_type": "code",
+   "execution_count": 27,
+   "metadata": {
+    "scrolled": false
+   },
+   "outputs": [
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "running with  sgd\n",
+      "(Iteration 1 / 200) loss: 2.913295\n",
+      "(Epoch 0 / 5) train acc: 0.107000; val_acc: 0.089000\n",
+      "(Iteration 11 / 200) loss: 2.206108\n",
+      "(Iteration 21 / 200) loss: 2.154635\n",
+      "(Iteration 31 / 200) loss: 2.118345\n",
+      "(Epoch 1 / 5) train acc: 0.301000; val_acc: 0.271000\n",
+      "(Iteration 41 / 200) loss: 2.069393\n",
+      "(Iteration 51 / 200) loss: 1.951994\n",
+      "(Iteration 61 / 200) loss: 1.970426\n",
+      "(Iteration 71 / 200) loss: 1.738475\n",
+      "(Epoch 2 / 5) train acc: 0.375000; val_acc: 0.286000\n",
+      "(Iteration 81 / 200) loss: 1.938511\n",
+      "(Iteration 91 / 200) loss: 1.711921\n",
+      "(Iteration 101 / 200) loss: 1.967765\n",
+      "(Iteration 111 / 200) loss: 1.854774\n",
+      "(Epoch 3 / 5) train acc: 0.365000; val_acc: 0.281000\n",
+      "(Iteration 121 / 200) loss: 1.732372\n",
+      "(Iteration 131 / 200) loss: 1.864291\n",
+      "(Iteration 141 / 200) loss: 1.698449\n",
+      "(Iteration 151 / 200) loss: 1.645028\n",
+      "(Epoch 4 / 5) train acc: 0.387000; val_acc: 0.292000\n",
+      "(Iteration 161 / 200) loss: 1.683421\n",
+      "(Iteration 171 / 200) loss: 1.691857\n",
+      "(Iteration 181 / 200) loss: 1.594841\n",
+      "(Iteration 191 / 200) loss: 1.812457\n",
+      "(Epoch 5 / 5) train acc: 0.438000; val_acc: 0.330000\n",
+      "\n",
+      "running with  sgd_momentum\n",
+      "(Iteration 1 / 200) loss: 2.924311\n",
+      "(Epoch 0 / 5) train acc: 0.110000; val_acc: 0.090000\n",
+      "(Iteration 11 / 200) loss: 2.195485\n",
+      "(Iteration 21 / 200) loss: 2.034897\n",
+      "(Iteration 31 / 200) loss: 1.920042\n",
+      "(Epoch 1 / 5) train acc: 0.317000; val_acc: 0.288000\n",
+      "(Iteration 41 / 200) loss: 1.905149\n",
+      "(Iteration 51 / 200) loss: 1.873083\n",
+      "(Iteration 61 / 200) loss: 1.860324\n",
+      "(Iteration 71 / 200) loss: 1.896899\n",
+      "(Epoch 2 / 5) train acc: 0.371000; val_acc: 0.334000\n",
+      "(Iteration 81 / 200) loss: 1.713345\n",
+      "(Iteration 91 / 200) loss: 1.594530\n",
+      "(Iteration 101 / 200) loss: 1.490765\n",
+      "(Iteration 111 / 200) loss: 1.707847\n",
+      "(Epoch 3 / 5) train acc: 0.454000; val_acc: 0.346000\n",
+      "(Iteration 121 / 200) loss: 1.559550\n",
+      "(Iteration 131 / 200) loss: 1.321711\n",
+      "(Iteration 141 / 200) loss: 1.491111\n",
+      "(Iteration 151 / 200) loss: 1.331292\n",
+      "(Epoch 4 / 5) train acc: 0.503000; val_acc: 0.371000\n",
+      "(Iteration 161 / 200) loss: 1.424070\n",
+      "(Iteration 171 / 200) loss: 1.561271\n",
+      "(Iteration 181 / 200) loss: 1.366538\n",
+      "(Iteration 191 / 200) loss: 1.381693\n",
+      "(Epoch 5 / 5) train acc: 0.508000; val_acc: 0.325000\n",
+      "\n"
+     ]
+    },
+    {
+     "name": "stderr",
+     "output_type": "stream",
+     "text": [
+      "/Users/feiliu/miniconda3/envs/cs231n/lib/python3.6/site-packages/matplotlib/cbook/deprecation.py:106: MatplotlibDeprecationWarning: Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.\n",
+      "  warnings.warn(message, mplDeprecation, stacklevel=1)\n"
+     ]
+    },
+    {
+     "data": {
+      "image/png": "\n",
+      "text/plain": [
+       "<matplotlib.figure.Figure at 0x112f45390>"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    }
+   ],
    "source": [
     "num_train = 4000\n",
     "small_data = {\n",
@@ -761,16 +1110,11 @@
     "  plt.legend(loc='upper center', ncol=4)\n",
     "plt.gcf().set_size_inches(15, 15)\n",
     "plt.show()"
-   ],
-   "cell_type": "code",
-   "outputs": [],
-   "metadata": {
-    "collapsed": true,
-    "scrolled": false
-   },
-   "execution_count": null
+   ]
   },
   {
+   "cell_type": "markdown",
+   "metadata": {},
    "source": [
     "# RMSProp and Adam\n",
     "RMSProp [1] and Adam [2] are update rules that set per-parameter learning rates by using a running average of the second moments of gradients.\n",
@@ -782,11 +1126,22 @@
     "[1] Tijmen Tieleman and Geoffrey Hinton. \"Lecture 6.5-rmsprop: Divide the gradient by a running average of its recent magnitude.\" COURSERA: Neural Networks for Machine Learning 4 (2012).\n",
     "\n",
     "[2] Diederik Kingma and Jimmy Ba, \"Adam: A Method for Stochastic Optimization\", ICLR 2015."
-   ],
-   "cell_type": "markdown",
-   "metadata": {}
+   ]
   },
   {
+   "cell_type": "code",
+   "execution_count": 28,
+   "metadata": {},
+   "outputs": [
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "next_w error:  9.524687511038133e-08\n",
+      "cache error:  2.6477955807156126e-09\n"
+     ]
+    }
+   ],
    "source": [
     "# Test RMSProp implementation\n",
     "from cs231n.optim import rmsprop\n",
@@ -813,15 +1168,23 @@
     "# You should see relative errors around e-7 or less\n",
     "print('next_w error: ', rel_error(expected_next_w, next_w))\n",
     "print('cache error: ', rel_error(expected_cache, config['cache']))"
-   ],
-   "cell_type": "code",
-   "outputs": [],
-   "metadata": {
-    "collapsed": true
-   },
-   "execution_count": null
+   ]
   },
   {
+   "cell_type": "code",
+   "execution_count": 30,
+   "metadata": {},
+   "outputs": [
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "next_w error:  0.20720703807110674\n",
+      "v error:  4.208314038113071e-09\n",
+      "m error:  4.214963193114416e-09\n"
+     ]
+    }
+   ],
    "source": [
     "# Test Adam implementation\n",
     "from cs231n.optim import adam\n",
@@ -855,22 +1218,103 @@
     "print('next_w error: ', rel_error(expected_next_w, next_w))\n",
     "print('v error: ', rel_error(expected_v, config['v']))\n",
     "print('m error: ', rel_error(expected_m, config['m']))"
-   ],
-   "cell_type": "code",
-   "outputs": [],
-   "metadata": {
-    "collapsed": true
-   },
-   "execution_count": null
+   ]
   },
   {
+   "cell_type": "markdown",
+   "metadata": {},
    "source": [
     "Once you have debugged your RMSProp and Adam implementations, run the following to train a pair of deep networks using these new update rules:"
-   ],
-   "cell_type": "markdown",
-   "metadata": {}
+   ]
   },
   {
+   "cell_type": "code",
+   "execution_count": 32,
+   "metadata": {
+    "scrolled": false
+   },
+   "outputs": [
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "running with  adam\n",
+      "(Iteration 1 / 200) loss: 2.685833\n",
+      "(Epoch 0 / 5) train acc: 0.140000; val_acc: 0.139000\n",
+      "(Iteration 11 / 200) loss: 2.140351\n",
+      "(Iteration 21 / 200) loss: 2.184988\n",
+      "(Iteration 31 / 200) loss: 2.078917\n",
+      "(Epoch 1 / 5) train acc: 0.285000; val_acc: 0.239000\n",
+      "(Iteration 41 / 200) loss: 1.805760\n",
+      "(Iteration 51 / 200) loss: 1.936246\n",
+      "(Iteration 61 / 200) loss: 1.710122\n",
+      "(Iteration 71 / 200) loss: 1.850842\n",
+      "(Epoch 2 / 5) train acc: 0.344000; val_acc: 0.324000\n",
+      "(Iteration 81 / 200) loss: 1.925757\n",
+      "(Iteration 91 / 200) loss: 1.657067\n",
+      "(Iteration 101 / 200) loss: 1.782571\n",
+      "(Iteration 111 / 200) loss: 1.694920\n",
+      "(Epoch 3 / 5) train acc: 0.415000; val_acc: 0.334000\n",
+      "(Iteration 121 / 200) loss: 1.632183\n",
+      "(Iteration 131 / 200) loss: 1.677200\n",
+      "(Iteration 141 / 200) loss: 1.577867\n",
+      "(Iteration 151 / 200) loss: 1.559504\n",
+      "(Epoch 4 / 5) train acc: 0.451000; val_acc: 0.351000\n",
+      "(Iteration 161 / 200) loss: 1.464830\n",
+      "(Iteration 171 / 200) loss: 1.480748\n",
+      "(Iteration 181 / 200) loss: 1.592701\n",
+      "(Iteration 191 / 200) loss: 1.627360\n",
+      "(Epoch 5 / 5) train acc: 0.488000; val_acc: 0.328000\n",
+      "\n",
+      "running with  rmsprop\n",
+      "(Iteration 1 / 200) loss: 2.510091\n",
+      "(Epoch 0 / 5) train acc: 0.135000; val_acc: 0.141000\n",
+      "(Iteration 11 / 200) loss: 2.125420\n",
+      "(Iteration 21 / 200) loss: 1.917919\n",
+      "(Iteration 31 / 200) loss: 1.868219\n",
+      "(Epoch 1 / 5) train acc: 0.354000; val_acc: 0.299000\n",
+      "(Iteration 41 / 200) loss: 1.772764\n",
+      "(Iteration 51 / 200) loss: 1.656074\n",
+      "(Iteration 61 / 200) loss: 1.605626\n",
+      "(Iteration 71 / 200) loss: 1.627182\n",
+      "(Epoch 2 / 5) train acc: 0.451000; val_acc: 0.320000\n",
+      "(Iteration 81 / 200) loss: 1.790212\n",
+      "(Iteration 91 / 200) loss: 1.651720\n",
+      "(Iteration 101 / 200) loss: 1.431547\n",
+      "(Iteration 111 / 200) loss: 1.585616\n",
+      "(Epoch 3 / 5) train acc: 0.464000; val_acc: 0.323000\n",
+      "(Iteration 121 / 200) loss: 1.572824\n",
+      "(Iteration 131 / 200) loss: 1.471482\n",
+      "(Iteration 141 / 200) loss: 1.362731\n",
+      "(Iteration 151 / 200) loss: 1.550077\n",
+      "(Epoch 4 / 5) train acc: 0.528000; val_acc: 0.357000\n",
+      "(Iteration 161 / 200) loss: 1.334730\n",
+      "(Iteration 171 / 200) loss: 1.396536\n",
+      "(Iteration 181 / 200) loss: 1.318601\n",
+      "(Iteration 191 / 200) loss: 1.361979\n",
+      "(Epoch 5 / 5) train acc: 0.552000; val_acc: 0.345000\n",
+      "\n"
+     ]
+    },
+    {
+     "name": "stderr",
+     "output_type": "stream",
+     "text": [
+      "/Users/feiliu/miniconda3/envs/cs231n/lib/python3.6/site-packages/matplotlib/cbook/deprecation.py:106: MatplotlibDeprecationWarning: Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.\n",
+      "  warnings.warn(message, mplDeprecation, stacklevel=1)\n"
+     ]
+    },
+    {
+     "data": {
+      "image/png": "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v/9+hg4dysKFC5k1a1bcYwff+/Cf4+jztVe8Y4nIwKPATkR6zPwZx5DmSYnYluZJYf6MYzp13OXLl/PCCy9w+OGHc9xxxwEwb948ABYvXszPfvYznn/++dD+J598Ml6vl8cee4xHHnkkVCLVK6YvAk9UYOtJc7YfpL70fhQVOb/wuv766/nZz37GypUrOeqoozj66KPbfYzCwkJSU1NZsWIF27ZtY/PmzSxcuDCinDOeYcOG4XK5+Pvf/86TTz7J559/zpgxYwDnPVqyZAk7d/b95j3dUfof/KC/b98+/vSnP7Fjh5MhPuusswCYP38+9913H2+99Vabr+nLcubNxXgj3zvj9ZIzb26CV3S/uXPn0tDQwJQpU8jIyKCioiLi+fD3fsqUKQwbNizucYqKiti5cyc33XQTN910Ezt37uS73/3uQR1LRAYGlWKKSI85d/IowFlrV1HbSH5mGvNnHBPafrAGDx7M8uXL+eyzz/B6vXzve9/jggsu4N133+V///d/AecD6wsvvEBmZiaHHXYYv/71r7nhhhu45557+M53vhNqAtHjCmY7X19d7JRfZox2grrg9oPQl96POXPmsHPnTn71q1+xdu1avv71r/Pzn/88lNFoj6OPPpoVK1Zwyy23UFxcTGZmJmeccQbDhw9P2obf4/Ewf/58fv7zn/ODH/yAJ554ggsuuCBUGpiamsq4cePYunVrF9xp9+mO0v/rrruO1157jeeee44LL7yQSZMmsX37dq666io2bNjAypUrOXDgAP/8z/8cKsVM9Jq+LGPmTMBZa+errMSdl0fOvLmh7b2htraW2267ja+++oqxY8dyzz33RDx/wgkn8NOf/pRjjjkm9Pc1nuAvYH79618DcMkll8T8Uqa9xxKRgcH0aglSG6ZOnWo3btzY25chIkls2bKFCRMm9PZlxPXAAw9QUFBAVVUVxcXFpKWl8emnnzJo0KDevrRecTDvx759+2LK7YYOHXrIvoci3eXMM8/kjTfeoKamhpEjR/bYsfryv+Ei4jDGvGOtndrWfirFFJEB6/nnn2fWrFlcc801TJ48mVWrVh3SAcnBvB/XXHNNqJ168L+nn366h65YRERE2ksZOxHpFP22d2D78MMPY9YAHXfcceR1UfMJEeld+jdcpO9rb8ZOa+xERCShiRMnMnHixN6+DBEREWmDSjFFpNP6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WResqaG1tpbQoUNgbZefo7Wysg9fQd9Qj52I9Jsn39vNTU9sYHetDwvsrvVx0xMbePK93T067759+1iyZAler5ecnBzmz59PdXU1119/PSNHjmTRokWcd955GGN48cUXAXj00UcpKSlh2rRpvPDCCz1/cUfrw9/DMz+Aui8A69w/8wNn/VHqj+uxaNEijDHcdNNNjBo1ilNOOYX169czbdo0Ro4cyf333w84lff+4R/+gXHjxpGdnc3ixYvZtGkTAKtXr8YYw/e+9z3GjRvHuHHjePXVVznrrLPwer1cddVVked79tlnOfbYY8nKyuLYY49lzZo1ALz44osYYzjnnHNYuHAhubm53HDDDQDMmzcPgJdeeinSAxl+zsceewyA8vLyyDij8LnOO+88TjjhBPLy8njooYe4/vrr8Xq9LFy4kNra2qP+dzlaz21/jtXrV1PZWInFUtlYyer1q3lu+3NHfc7q6mrmzJmD1+vF6/VyyimnsGnTJpqbm/nmN79JXl4ef/M3f8OhQ4eOeAzAAw88gDGGFStWMGPGDAoLC3n++ee55JJLyMrK4txzz6W1tbXH16K7wilWrXv2gLWRFKuejp/ZuXMnxhhOPPFETj/9dEaPHo0xhoULF3L22WeTnZ3NnXfeyc9+9jNyc3OZPXt2pNfz17/+NWPHjiU9PZ1jjjmGn/3sZ0D0M3XbbbdRVFREeXk5H374IRD9rFx++eVMnDiRG264gZqaGlasWEFBQQEFBQVceuml1NTUHPFcIgONDYVoramhefsOmt59j/p166h9/HEO/Pa37Lv7bvbcfDNf/N332Hnx/2Lbl8/mkxMW8FF5BVsXnMj2ryzls/91Cbu+dzWVq26h+mc/p+bhh2lcv55AVRUmw4Nn5gxyly4l/+/+jqJVqyi9+27G/u63THjicSa/sI6UkpK47eps/UCmn3tEpNf85JlNbN5zqNPt731eS0sw1GadLxDkxsc+5D/++nncY2aU5nDb8pmHfd5HHnmEdevW8eMf/5jx48fz9ttv8/zzz/Pzn/+ck08+mfPPP5+bbropsv/evXu54oorGDlyJNdddx333XdfN15lNz3/v6FqQ+fbd70Fwea26wI+eOpqeOff4x9TXAFn/7TTU/bn9di2bRtf+cpXePjhh1m2bBm33347N998M9dddx3f+ta3uP/++1m1ahXLli3jjDPO4Mc//jHnnHMOW7ZsiZzj1Vdf5corr+TWW2/l1FNPZdWqVezfv5/f/OY3fPe73yUzM5Pzzz+fOXPmsGrVKv74xz9y3nnn8cknn0TOsWbNGu644w527drF3Xffzfe//33uuOMOLrnkEqZPn86tt95KeXl5JKA7nHXr1nHHHXfw4x//mBUrVnD++edz7rnn8sgjj/DAAw9wzTXXdPn6dMWdf72Tjw5+1On2D6s/pCXU0madP+jn1tdu5bFP4r+eaSOn8aMv/ajTcyYlJfHVr36V0tJSKisr+ad/+ieuueYali1bxsMPP8x5553HggUL2rxPOjvmL3/5S2SfdevWccMNN7By5UqWLVvGd77zHU4++WSeeuopnn32Wc4999yuXpYuqbrjDpq3dH7tfB98gG1pe+2s30/lzauo/f0f4h6TPn0axT/+cZee//XXX+fGG2/koosu4qqrruL111/nzjvvZMuWLdx0002cdtpprFixgvvuu4977rmHe+65hxtvvJFx48Zx++23s3fv3g49bxs2bOCHP/whN910EytWrODdd9+NbPvzn//MLbfcwuTJk1m5ciUPPfQQP/zhDzHGcNdddwHw4IMPdulcIn3BhkKEDh0iWFsb7T2rqSFYWxNnnXtfVwehUNzzmdRUkkeOJHnECJLz8kifPo2UESNIznMeJ48Y4d7y3PV5mIyMbhUGKrzu2jZj7ACMx0Phtb37Xd8fFNiJSL9pH9QdaX1XlZWVAU7PTDAY5Otf/zpPP/00ALfddhunn346b7zxBo8++igAb7zxBn6/n8svv5xvf/vbJCcnc+WVV/aoDUetfVB3pPVd0J/X44477mDHjh08/PDDLF26lKuvvpr/+q//4tVXX6Wmpob//u//BuDnP/85ZWVlvPnmmzz66KNtgrLvf//7XHbZZdx6662UlJTwk5/8hFAoxLvvvsuOHTvYs2cPLS0tvPnmm7z55puR415//XVGjhwJwDnnnMPKlSvZsmULv/71r/nss88488wzASgsLOTrX/86QJcCu+XLl/O9732PRx99lPXr1/OP//iP7Ny5k0ceeYQdO3Z06br0pvZB3ZHWd0VzczN/+tOfeP3117FuatKGDRvwer0A3HXXXUyaNImnn36aV1999bDHxLr00kv5/ve/z09/+lOqqqr4xS9+wUMPPcSf//znhFy79kHdkdZ315w5c7jzzjsjvXHz58/nuuuu45133uGzzz7jpptuYvz48dx3332R119WVsb27dt56aWXOO6447jkkkvanLP9ta+rq4tsu/HGGyM92V/72tcYPXp0JKB79NFHef755494rtzc3F557TL02VCIUH19JADrkOZYG29d7eGDtBHRgCx9yhSSR+SRnOcGZeGAzd0nZUQeJjOzz6u3hlOz+zpluz8osBORXnOknrWTfrqO3bW+DutH52XwX1ctOOrnXbZsGW+88QZ/+ctf+NOf/sSdd97J7Nmzga6V87bdyLnvtsP0rAHwi3I3DbOd3LHwraNLtevP65GXl0dqaqrTZPcPxuTkZACCwWBkv8M9b+w58vLyOpwj3J4bb7yRM844I3Lc9OnT2bp1K0AkwAv3fgSDwbjPGT5vOC0wXmpluA2xryvea+oth+tZAzjzsTOpbOw41qMkq4T7v3z/UT3nfffdx/r167n66qtZvnw5V1xxBfX19R32i30vdOWY2GuXkZFBWlpan167I/WsbT1tiZOG2U5KaSnjHnowzhHdU1pa2uZxV94769at4/HHH+fdd9/lpptuivwQ0l742se+j9s/X1fFO5cML9ZaQg0Nbcei1dZGe8/CvWo1tbTWRoM1OvvcpqaSnJdLihuIpU+e3DFIiwnikvNGkJTV90Ha0cpdvnxQBnLtKbATkX5zw1lTuemJDfgC0f8oMlKTueGsqT0672OPPcYHH3zA5MmTmTlzJq+99hrXXnstl112GbfffjubN2/mqaeeiux/wgkn4PF4uP/++xk7dmzfpmIeyZJbnTF1gZiANzXDWX+UBtL1WLp0KY8//jjXXXcdZ5xxBk8//TSTJk1iypQpXT7HmWeeSVpaGk888QSTJ0+mtraW3//+9/zhD/FT6cJycnJISkri008/5ZFHHuHkk09m/PjxgHONdu7cye7dPRvf2R9Wzl3J6vWr8QejaUKeZA8r56486nOG/9BvaGjglVdeYdeuXeTm5rJ48WKefPJJbrjhBhYsWMAbb7xxxGMGssJrrxlwKVbXXHMNxx13HHPnzuWJJ55gT7vAM/baz507l5ycnLjnWbp0KQ8++CA/+pHzw8Du3bu59NJLj+pcMrhYawk1NrYpDtJpmmNtDa3hIK2zca4pKZEesuS8EaRPnBST5hjbmxZNfUzKyhqwQdpwpsBORPpNuPpl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8ePH8+STT/Kf//mf1NfXk5OTw/z587n55psDf1OLFi3iiSeeICsri6VLlzJt2rTA38o111zDe++9xw9+8AMWLVrEggULeO01PXp77rnn8uijj5KWltbnsYaEng5DpIUKt93B987W8O1tSZA2Tn8VfR9Sx+rzqWP1159P0h96RWJPhvh0+LwMPn5KX5Y6Vhd4Y2dA4QzImgImSVATDg/kN10QhCEjUtT1t3yglJWVsXr1aubPn8+DDz7IMcccw6pVq3jooYcoLS1l7ty5vP3224Ht6+rq+OlPf4rJZOKmm27i/fffP6DzHxCRoq6/5QNgKO/Ht99+y3nnnceaNWs4//zzuf766/F6vdx0000APP300yxcuJBp06bxX//1X3zyySf84Ac/wO12B46xZs0arr32WsrLyznllFOYMWMGkydP5qmnnuKLL75g27ZtzJ07l7i4OBYuXIjdbueiiy6ipqYmcIx//etfzJ07l4yMDP74xz9SXl7OvffeC0BJSQnPPfccF1988YCuafXq1fz4xz9GKcXVV19NRUUFF154IR988MGwpHVGirr+lg8Ek8nED3/4Qx599FFuv/12Nm7cyI033sgTTzzBkiVLOP300zn55JP56KOP+t0nlNWrV/OLX/yCxsZGzj//fFJTU/ne977Hyy+/HBDvQ0mkqOtv+b6ydu1ajj/+eO65557A+zPPPJOMjAzuuOMOVq1axdVXX83GjRt55JFHALj11ltJS0vjiSee4Je//GWU2P3qq6/4j//4D7Zu3RoVaX7rrbe47bbbOP/885k/fz7PPPMMV199Nddccw3PPvss8+fPH/CxDgh3NzRsg+3/gk/+Am8vgmVXwVOnwR+OgN8XwJ9nwnOXwqpb4ZO/QtMOSMqFoy6BM++BS/4B170Ht+6COyrgFx/Cj57TH1rN/CVMma0/xHKkwKxFYI0LH4M1DmY/CFe+DLeX68c65z7IPxZ2vqenb/55JvxhPJRdAh88BHvWgltcQIVDF4nYCYIwaPQXWTvpvtVUtXRHLS9IjeP/fj5zv89bXFwM6JEZr9fLZZddxiuvvKKP6c47OeOMM1i3bh1Lly4FYN26dTidTn7yk59w3XXXYTabufbaa/f7/H3SR2QN0GvqYj2JTimEa/avjmoo78e9997Lrl27WLJkCbNnz+b666/n//7v/1izZg179+7l9ddf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\n",
+      "text/plain": [
+       "<matplotlib.figure.Figure at 0x18171c5ac8>"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    }
+   ],
    "source": [
     "learning_rates = {'rmsprop': 1e-4, 'adam': 1e-3}\n",
     "for update_rule in ['adam', 'rmsprop']:\n",
@@ -915,15 +1359,11 @@
     "  plt.legend(loc='upper center', ncol=4)\n",
     "plt.gcf().set_size_inches(15, 15)\n",
     "plt.show()"
-   ],
-   "cell_type": "code",
-   "outputs": [],
-   "metadata": {
-    "collapsed": true
-   },
-   "execution_count": null
+   ]
   },
   {
+   "cell_type": "markdown",
+   "metadata": {},
    "source": [
     "## Inline Question 3:\n",
     "\n",
@@ -935,18 +1375,20 @@
     "```\n",
     "\n",
     "John notices that when he was training a network with AdaGrad that the updates became very small, and that his network was learning slowly. Using your knowledge of the AdaGrad update rule, why do you think the updates would become very small? Would Adam have the same issue?\n"
-   ],
-   "cell_type": "markdown",
-   "metadata": {}
+   ]
   },
   {
-   "source": [
-    "## Answer: \n"
-   ],
    "cell_type": "markdown",
-   "metadata": {}
+   "metadata": {},
+   "source": [
+    "## Answer: \n",
+    "The cache is going to be increasing strictly through time. If we are having lots of iterations, the dw scaled by a large number is going to be small. That caused more iteration in turn. Vicious cycle.\n",
+    "It depends. Adam might have the issue when the dx is always increasing, the v will increase as well. However, if dx is bounded, the v itself is a moving average and will be bounded as well. But, at least, Adam has some easy to satisfy condition when it is somewhat bounded in the demoninator in scale. So, Adam is likely to have the same issue as AdaGrad."
+   ]
   },
   {
+   "cell_type": "markdown",
+   "metadata": {},
    "source": [
     "# Train a good model!\n",
     "Train the best fully-connected model that you can on CIFAR-10, storing your best model in the `best_model` variable. We require you to get at least 50% accuracy on the validation set using a fully-connected net.\n",
@@ -954,11 +1396,16 @@
     "If you are careful it should be possible to get accuracies above 55%, but we don't require it for this part and won't assign extra credit for doing so. Later in the assignment we will ask you to train the best convolutional network that you can on CIFAR-10, and we would prefer that you spend your effort working on convolutional nets rather than fully-connected nets.\n",
     "\n",
     "You might find it useful to complete the `BatchNormalization.ipynb` and `Dropout.ipynb` notebooks before completing this part, since those techniques can help you train powerful models."
-   ],
-   "cell_type": "markdown",
-   "metadata": {}
+   ]
   },
   {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {
+    "collapsed": true,
+    "scrolled": false
+   },
+   "outputs": [],
    "source": [
     "best_model = None\n",
     "################################################################################\n",
@@ -970,36 +1417,50 @@
     "################################################################################\n",
     "#                              END OF YOUR CODE                                #\n",
     "################################################################################"
-   ],
-   "cell_type": "code",
-   "outputs": [],
-   "metadata": {
-    "collapsed": true,
-    "scrolled": false
-   },
-   "execution_count": null
+   ]
   },
   {
+   "cell_type": "markdown",
+   "metadata": {},
    "source": [
     "# Test your model!\n",
     "Run your best model on the validation and test sets. You should achieve above 50% accuracy on the validation set."
-   ],
-   "cell_type": "markdown",
-   "metadata": {}
+   ]
   },
   {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {
+    "collapsed": true
+   },
+   "outputs": [],
    "source": [
     "y_test_pred = np.argmax(best_model.loss(data['X_test']), axis=1)\n",
     "y_val_pred = np.argmax(best_model.loss(data['X_val']), axis=1)\n",
     "print('Validation set accuracy: ', (y_val_pred == data['y_val']).mean())\n",
     "print('Test set accuracy: ', (y_test_pred == data['y_test']).mean())"
-   ],
-   "cell_type": "code",
-   "outputs": [],
-   "metadata": {
-    "collapsed": true
+   ]
+  }
+ ],
+ "metadata": {
+  "kernelspec": {
+   "display_name": "Python 3",
+   "language": "python",
+   "name": "python3"
+  },
+  "language_info": {
+   "codemirror_mode": {
+    "name": "ipython",
+    "version": 3
    },
-   "execution_count": null
+   "file_extension": ".py",
+   "mimetype": "text/x-python",
+   "name": "python",
+   "nbconvert_exporter": "python",
+   "pygments_lexer": "ipython3",
+   "version": "3.6.4"
   }
- ]
-}
\ No newline at end of file
+ },
+ "nbformat": 4,
+ "nbformat_minor": 2
+}
diff --git a/cs231n/classifiers/fc_net.py b/cs231n/classifiers/fc_net.py
index 6257f2c..56d09ff 100644
--- a/cs231n/classifiers/fc_net.py
+++ b/cs231n/classifiers/fc_net.py
@@ -47,7 +47,11 @@ class TwoLayerNet(object):
         # and biases using the keys 'W1' and 'b1' and second layer                 #
         # weights and biases using the keys 'W2' and 'b2'.                         #
         ############################################################################
-        pass
+        self.params['W1'] = np.random.normal(0, weight_scale,(input_dim, hidden_dim))
+        self.params['b1'] = np.zeros(hidden_dim)
+        self.params['W2'] = np.random.normal(0, weight_scale,(hidden_dim, num_classes))
+        self.params['b2'] = np.zeros(num_classes)
+
         ############################################################################
         #                             END OF YOUR CODE                             #
         ############################################################################
@@ -77,7 +81,12 @@ class TwoLayerNet(object):
         # TODO: Implement the forward pass for the two-layer net, computing the    #
         # class scores for X and storing them in the scores variable.              #
         ############################################################################
-        pass
+        out, cache_aff1 = affine_forward(X,self.params['W1'], self.params['b1'] )
+        out, cache_relu = relu_forward(out)
+        scores, cache_aff2 = affine_forward(out,self.params['W2'], self.params['b2'] )
+        # exp_out = np.exp(out)
+        # sum_exp = np.sum(exp_out, axis=1)
+        # scores = exp_out/sum_exp
         ############################################################################
         #                             END OF YOUR CODE                             #
         ############################################################################
@@ -97,7 +106,16 @@ class TwoLayerNet(object):
         # automated tests, make sure that your L2 regularization includes a factor #
         # of 0.5 to simplify the expression for the gradient.                      #
         ############################################################################
-        pass
+        loss, dx = softmax_loss(scores,y)
+        loss+= 0.5 * self.reg * (
+            np.sum(self.params['W1']**2) +  np.sum(self.params['W2'] **2))
+        dx, dw, db = affine_backward(dx, cache_aff2)
+        grads['W2'] = dw + self.reg * self.params['W2']
+        grads['b2'] = db
+        dx = relu_backward(dx, cache_relu)
+        dx, dw, db = affine_backward(dx, cache_aff1)
+        grads['W1'] = dw + self.reg * self.params['W1']
+        grads['b1'] = db
         ############################################################################
         #                             END OF YOUR CODE                             #
         ############################################################################
@@ -164,7 +182,15 @@ class FullyConnectedNet(object):
         # beta2, etc. Scale parameters should be initialized to ones and shift     #
         # parameters should be initialized to zeros.                               #
         ############################################################################
-        pass
+        dims = np.hstack((input_dim, hidden_dims, num_classes))
+        for i in range(self.num_layers):
+            weight_key = "W{:d}".format(i+1)
+            self.params[weight_key] = np.random.normal(0,weight_scale,[dims[i], dims[i+1]])
+            b_key = "b{:d}".format(i+1)
+            self.params[b_key] = np.zeros(dims[i+1])
+            if self.normalization == "batchnorm" and i < self.num_layers - 1:
+                self.params['gamma{:d}'.format(i + 1)] = np.ones(dims[i+1])
+                self.params['beta{:d}'.format(i + 1)] = np.zeros(dims[i+1])
         ############################################################################
         #                             END OF YOUR CODE                             #
         ############################################################################
@@ -223,7 +249,37 @@ class FullyConnectedNet(object):
         # self.bn_params[1] to the forward pass for the second batch normalization #
         # layer, etc.                                                              #
         ############################################################################
-        pass
+        layers_in_loop = self.num_layers - 1
+        scores = X
+        cache_history = []
+        l2_reg = 0
+
+        for i in range(layers_in_loop):
+            scores, cache = affine_forward(scores, self.params['W{:d}'.format(i + 1)],
+                                           self.params['b{:d}'.format(i + 1)])
+            cache_history.append(cache)
+            # "batchnorm", "layernorm", or None
+            if self.normalization == "batchnorm":
+                scores, cache = batchnorm_forward(scores,
+                                                       self.params['gamma{:d}'.format(i + 1)],
+                                                       self.params['beta{:d}'(i + 1)],
+                                                       self.bn_params[i])
+                cache_history.append(cache)
+
+
+            scores, cache = relu_forward(scores)
+            cache_history.append(cache)
+            if self.use_dropout:
+                scores, cache = dropout_forward(scores, self.dropout_param)
+                cache_history.append(cache)
+            l2_reg += np.sum(self.params['W{:d}'.format(i + 1)] ** 2)
+
+        scores, cache = affine_forward(scores, self.params['W{:d}'.format(self.num_layers)],
+                                       self.params['b{:d}'.format(self.num_layers)])
+        cache_history.append(cache)
+        l2_reg += np.sum(self.params['W{:d}'.format(self.num_layers)] ** 2)
+        l2_reg *= 0.5 * self.reg
+        # print(" self.params",  self.params)
         ############################################################################
         #                             END OF YOUR CODE                             #
         ############################################################################
@@ -246,7 +302,21 @@ class FullyConnectedNet(object):
         # automated tests, make sure that your L2 regularization includes a factor #
         # of 0.5 to simplify the expression for the gradient.                      #
         ############################################################################
-        pass
+        loss, dout = softmax_loss(scores, y)
+        loss += l2_reg
+        dout, grads['W{:d}'.format(self.num_layers)], grads['b{:d}'.format(self.num_layers)] = affine_backward(dout, cache_history.pop())
+        grads['W{:d}'.format(self.num_layers)] += self.reg * self.params['W{:d}'.format(self.num_layers)]
+        i = self.num_layers - 2
+        while i >= 0:
+            if self.use_dropout:
+                dout = dropout_backward(dout, cache_history.pop())
+            dout = relu_backward(dout, cache_history.pop())
+            if self.normalization == "batchnorm":
+                dout, grads['gamma{:d}'.format(i + 1)], grads['beta{:d}'.format(i + 1)] = batchnorm_backward(dout, cache_history.pop())
+            dout, grads['W{:d}'.format(i + 1)], grads['b{:d}'.format(i + 1)] = affine_backward(dout, cache_history.pop())
+            grads['W{:d}'.format(i + 1)] += self.reg * self.params['W{:d}'.format(i + 1)]
+            i -= 1
+
         ############################################################################
         #                             END OF YOUR CODE                             #
         ############################################################################
diff --git a/cs231n/layers.py b/cs231n/layers.py
index 13a8bba..a94261d 100644
--- a/cs231n/layers.py
+++ b/cs231n/layers.py
@@ -25,7 +25,13 @@ def affine_forward(x, w, b):
     # TODO: Implement the affine forward pass. Store the result in out. You   #
     # will need to reshape the input into rows.                               #
     ###########################################################################
-    pass
+    x_shape = x.shape
+    N= x_shape[0]
+    prod = 1
+    for dim in x_shape[1:]:
+        prod*=dim
+    out = x.reshape(N,prod)
+    out= out.dot(w)+b
     ###########################################################################
     #                             END OF YOUR CODE                            #
     ###########################################################################
@@ -54,7 +60,20 @@ def affine_backward(dout, cache):
     ###########################################################################
     # TODO: Implement the affine backward pass.                               #
     ###########################################################################
-    pass
+    x_shape = x.shape
+    # print("x_shape", x_shape)
+    N = x_shape[0]
+    prod = 1
+    for dim in x_shape[1:]:
+        prod*=dim
+    # print("prod", prod)
+    out = x.reshape(N,prod)
+
+    dx = dout.dot(w.T)
+    dw = out.T.dot(dout)
+    db = np.sum(dout,axis=0)
+    dx = dx.reshape(*x_shape)
+    # print("dx shape", dx.shape)
     ###########################################################################
     #                             END OF YOUR CODE                            #
     ###########################################################################
@@ -76,7 +95,8 @@ def relu_forward(x):
     ###########################################################################
     # TODO: Implement the ReLU forward pass.                                  #
     ###########################################################################
-    pass
+    out = np.copy(x)
+    out[out<0]=0
     ###########################################################################
     #                             END OF YOUR CODE                            #
     ###########################################################################
@@ -99,7 +119,8 @@ def relu_backward(dout, cache):
     ###########################################################################
     # TODO: Implement the ReLU backward pass.                                 #
     ###########################################################################
-    pass
+    dx = np.copy(dout)
+    dx[x<0]=0
     ###########################################################################
     #                             END OF YOUR CODE                            #
     ###########################################################################
@@ -175,7 +196,17 @@ def batchnorm_forward(x, gamma, beta, bn_param):
         # Referencing the original paper (https://arxiv.org/abs/1502.03167)   #
         # might prove to be helpful.                                          #
         #######################################################################
-        pass
+        sample_mean = np.mean(x, axis=0)
+        sample_var = np.var(x, axis=0)
+        x_norm = (x - sample_mean.T) / np.sqrt(sample_var.T + eps)
+
+        out = x_norm * gamma + beta
+
+        running_mean = momentum * running_mean + (1.0 - momentum) * sample_mean
+        running_var = momentum * running_var + (1.0 - momentum) * sample_var
+
+        cache = (sample_mean, sample_var, x_norm, x, gamma, beta, eps)
+
         #######################################################################
         #                           END OF YOUR CODE                          #
         #######################################################################
@@ -186,7 +217,8 @@ def batchnorm_forward(x, gamma, beta, bn_param):
         # then scale and shift the normalized data using gamma and beta.      #
         # Store the result in the out variable.                               #
         #######################################################################
-        pass
+        x_norm = (x - running_mean) / np.sqrt(running_var)
+        out = x_norm * gamma + beta
         #######################################################################
         #                          END OF YOUR CODE                           #
         #######################################################################
@@ -224,7 +256,17 @@ def batchnorm_backward(dout, cache):
     # Referencing the original paper (https://arxiv.org/abs/1502.03167)       #
     # might prove to be helpful.                                              #
     ###########################################################################
-    pass
+    sample_mean, sample_var, x_stand, x, gamma, beta, eps = cache
+    N, D = dout.shape
+
+    dbeta = np.sum(dout, axis=0)
+    dgamma = np.sum(x_stand * dout, axis=0)
+    inverse_var_sample = (sample_var + eps)**(-1.0)
+    inverse_std_sample = (sample_var + eps)**(-1./ 2.)
+    dx = (1. / N) * gamma * inverse_std_sample * (
+    N * dout # through x
+    - np.sum(dout, axis=0) # through mu
+    - (x - sample_mean) *inverse_var_sample* np.sum(dout * (x - sample_mean), axis=0)) # through sigma
     ###########################################################################
     #                             END OF YOUR CODE                            #
     ###########################################################################
@@ -255,7 +297,18 @@ def batchnorm_backward_alt(dout, cache):
     # should be able to compute gradients with respect to the inputs in a     #
     # single statement; our implementation fits on a single 80-character line.#
     ###########################################################################
-    pass
+    sample_mean, sample_var, x_stand, x, gamma, beta, eps = cache
+    N, D = dout.shape
+
+    dbeta = np.sum(dout, axis=0)
+    dgamma = np.sum(x_stand * dout, axis=0)
+    inverse_var_sample = (sample_var + eps)**(-1.0)
+    inverse_std_sample = (sample_var + eps)**(-1./ 2.)
+    dx = (1. / N) * gamma * inverse_std_sample * (
+        N * dout # through x
+        - np.sum(dout, axis=0) # through mu
+        - (x - sample_mean) *inverse_var_sample* np.sum(dout * (x - sample_mean), axis=0)) # through sigma
+
     ###########################################################################
     #                             END OF YOUR CODE                            #
     ###########################################################################
diff --git a/cs231n/optim.py b/cs231n/optim.py
index f7fc3d0..d5a4b2b 100644
--- a/cs231n/optim.py
+++ b/cs231n/optim.py
@@ -65,7 +65,8 @@ def sgd_momentum(w, dw, config=None):
     # TODO: Implement the momentum update formula. Store the updated value in #
     # the next_w variable. You should also use and update the velocity v.     #
     ###########################################################################
-    pass
+    v = config.get('momentum')*v - config.get('learning_rate')*dw
+    next_w = w+v
     ###########################################################################
     #                             END OF YOUR CODE                            #
     ###########################################################################
@@ -99,7 +100,8 @@ def rmsprop(w, dw, config=None):
     # in the next_w variable. Don't forget to update cache value stored in    #
     # config['cache'].                                                        #
     ###########################################################################
-    pass
+    config['cache'] = config['decay_rate'] * config['cache'] + (1 - config['decay_rate'])*(dw**2)
+    next_w = w - config['learning_rate'] * dw / (np.sqrt(config['cache']) + config['epsilon'])
     ###########################################################################
     #                             END OF YOUR CODE                            #
     ###########################################################################
@@ -139,7 +141,12 @@ def adam(w, dw, config=None):
     # NOTE: In order to match the reference output, please modify t _before_  #
     # using it in any calculations.                                           #
     ###########################################################################
-    pass
+    beta1 = config['beta1']
+    beta2 = config['beta2']
+    config['m'] = beta1 * config['m'] + (1-beta1)*dw
+    config['v'] = beta2 * config['v'] + (1-beta2)*(dw**2)
+    next_w = w - config['learning_rate'] * config['m']/(np.sqrt(config['v'] + config['epsilon']))
+    
     ###########################################################################
     #                             END OF YOUR CODE                            #
     ###########################################################################
